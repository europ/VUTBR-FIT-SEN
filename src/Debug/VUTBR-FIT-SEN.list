
VUTBR-FIT-SEN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000117c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  0800123c  0800123c  0001123c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800128c  0800128c  0001128c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001290  08001290  00011290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08001294  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000100  20000004  08001298  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000104  08001298  00020104  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   00009c88  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000017e3  00000000  00000000  00029cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000021aa  00000000  00000000  0002b497  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000480  00000000  00000000  0002d648  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000678  00000000  00000000  0002dac8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00002cc0  00000000  00000000  0002e140  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001c48  00000000  00000000  00030e00  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00032a48  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000b98  00000000  00000000  00032ac4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001224 	.word	0x08001224

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08001224 	.word	0x08001224

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_sqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5609      	ldrsb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			; (mov r8, r8)

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f806 	bl	8000254 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__aeabi_idiv0>:
 8000254:	4770      	bx	lr
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000258:	b510      	push	{r4, lr}
 800025a:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 800025c:	f000 fc1c 	bl	8000a98 <HAL_RCC_GetHCLKFreq>
 8000260:	21fa      	movs	r1, #250	; 0xfa
 8000262:	0089      	lsls	r1, r1, #2
 8000264:	f7ff ff6c 	bl	8000140 <__udivsi3>
 8000268:	f000 f870 	bl	800034c <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 800026c:	2001      	movs	r0, #1
 800026e:	2200      	movs	r2, #0
 8000270:	0021      	movs	r1, r4
 8000272:	4240      	negs	r0, r0
 8000274:	f000 f830 	bl	80002d8 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000278:	2000      	movs	r0, #0
 800027a:	bd10      	pop	{r4, pc}

0800027c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800027c:	2310      	movs	r3, #16
 800027e:	4a06      	ldr	r2, [pc, #24]	; (8000298 <HAL_Init+0x1c>)
{
 8000280:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000282:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000284:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000286:	430b      	orrs	r3, r1
 8000288:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800028a:	f7ff ffe5 	bl	8000258 <HAL_InitTick>
  HAL_MspInit();
 800028e:	f000 fed7 	bl	8001040 <HAL_MspInit>
}
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	46c0      	nop			; (mov r8, r8)
 8000298:	40022000 	.word	0x40022000

0800029c <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800029c:	4a02      	ldr	r2, [pc, #8]	; (80002a8 <HAL_IncTick+0xc>)
 800029e:	6813      	ldr	r3, [r2, #0]
 80002a0:	3301      	adds	r3, #1
 80002a2:	6013      	str	r3, [r2, #0]
}
 80002a4:	4770      	bx	lr
 80002a6:	46c0      	nop			; (mov r8, r8)
 80002a8:	20000020 	.word	0x20000020

080002ac <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80002ac:	4b01      	ldr	r3, [pc, #4]	; (80002b4 <HAL_GetTick+0x8>)
 80002ae:	6818      	ldr	r0, [r3, #0]
}
 80002b0:	4770      	bx	lr
 80002b2:	46c0      	nop			; (mov r8, r8)
 80002b4:	20000020 	.word	0x20000020

080002b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80002b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80002ba:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 80002bc:	f7ff fff6 	bl	80002ac <HAL_GetTick>
  uint32_t wait = Delay;
 80002c0:	9c01      	ldr	r4, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 80002c2:	0005      	movs	r5, r0
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
     wait++;
 80002c4:	1c63      	adds	r3, r4, #1
 80002c6:	1e5a      	subs	r2, r3, #1
 80002c8:	4193      	sbcs	r3, r2
 80002ca:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80002cc:	f7ff ffee 	bl	80002ac <HAL_GetTick>
 80002d0:	1b40      	subs	r0, r0, r5
 80002d2:	42a0      	cmp	r0, r4
 80002d4:	d3fa      	bcc.n	80002cc <HAL_Delay+0x14>
  {
  }
}
 80002d6:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

080002d8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80002d8:	b570      	push	{r4, r5, r6, lr}
 80002da:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80002dc:	2800      	cmp	r0, #0
 80002de:	da14      	bge.n	800030a <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002e0:	230f      	movs	r3, #15
 80002e2:	b2c0      	uxtb	r0, r0
 80002e4:	4003      	ands	r3, r0
 80002e6:	3b08      	subs	r3, #8
 80002e8:	4a11      	ldr	r2, [pc, #68]	; (8000330 <HAL_NVIC_SetPriority+0x58>)
 80002ea:	089b      	lsrs	r3, r3, #2
 80002ec:	009b      	lsls	r3, r3, #2
 80002ee:	189b      	adds	r3, r3, r2
 80002f0:	2203      	movs	r2, #3
 80002f2:	4010      	ands	r0, r2
 80002f4:	4090      	lsls	r0, r2
 80002f6:	32fc      	adds	r2, #252	; 0xfc
 80002f8:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002fa:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002fc:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002fe:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000300:	69dc      	ldr	r4, [r3, #28]
 8000302:	43ac      	bics	r4, r5
 8000304:	4321      	orrs	r1, r4
 8000306:	61d9      	str	r1, [r3, #28]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000308:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800030a:	2503      	movs	r5, #3
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	4028      	ands	r0, r5
 8000310:	40a8      	lsls	r0, r5
 8000312:	35fc      	adds	r5, #252	; 0xfc
 8000314:	002e      	movs	r6, r5
 8000316:	4a07      	ldr	r2, [pc, #28]	; (8000334 <HAL_NVIC_SetPriority+0x5c>)
 8000318:	009b      	lsls	r3, r3, #2
 800031a:	189b      	adds	r3, r3, r2
 800031c:	22c0      	movs	r2, #192	; 0xc0
 800031e:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000320:	4029      	ands	r1, r5
 8000322:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000324:	0092      	lsls	r2, r2, #2
 8000326:	589c      	ldr	r4, [r3, r2]
 8000328:	43b4      	bics	r4, r6
 800032a:	4321      	orrs	r1, r4
 800032c:	5099      	str	r1, [r3, r2]
 800032e:	e7eb      	b.n	8000308 <HAL_NVIC_SetPriority+0x30>
 8000330:	e000ed00 	.word	0xe000ed00
 8000334:	e000e100 	.word	0xe000e100

08000338 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000338:	231f      	movs	r3, #31
 800033a:	4018      	ands	r0, r3
 800033c:	3b1e      	subs	r3, #30
 800033e:	4083      	lsls	r3, r0
 8000340:	4a01      	ldr	r2, [pc, #4]	; (8000348 <HAL_NVIC_EnableIRQ+0x10>)
 8000342:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000344:	4770      	bx	lr
 8000346:	46c0      	nop			; (mov r8, r8)
 8000348:	e000e100 	.word	0xe000e100

0800034c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800034c:	4a09      	ldr	r2, [pc, #36]	; (8000374 <HAL_SYSTICK_Config+0x28>)
 800034e:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8000350:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000352:	4293      	cmp	r3, r2
 8000354:	d80d      	bhi.n	8000372 <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000356:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000358:	4a07      	ldr	r2, [pc, #28]	; (8000378 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800035a:	4808      	ldr	r0, [pc, #32]	; (800037c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800035c:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800035e:	6a03      	ldr	r3, [r0, #32]
 8000360:	0609      	lsls	r1, r1, #24
 8000362:	021b      	lsls	r3, r3, #8
 8000364:	0a1b      	lsrs	r3, r3, #8
 8000366:	430b      	orrs	r3, r1
 8000368:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800036a:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800036c:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800036e:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000370:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000372:	4770      	bx	lr
 8000374:	00ffffff 	.word	0x00ffffff
 8000378:	e000e010 	.word	0xe000e010
 800037c:	e000ed00 	.word	0xe000ed00

08000380 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000380:	4b05      	ldr	r3, [pc, #20]	; (8000398 <HAL_SYSTICK_CLKSourceConfig+0x18>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000382:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000384:	2804      	cmp	r0, #4
 8000386:	d102      	bne.n	800038e <HAL_SYSTICK_CLKSourceConfig+0xe>
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000388:	4310      	orrs	r0, r2
 800038a:	6018      	str	r0, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800038c:	4770      	bx	lr
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800038e:	2104      	movs	r1, #4
 8000390:	438a      	bics	r2, r1
 8000392:	601a      	str	r2, [r3, #0]
}
 8000394:	e7fa      	b.n	800038c <HAL_SYSTICK_CLKSourceConfig+0xc>
 8000396:	46c0      	nop			; (mov r8, r8)
 8000398:	e000e010 	.word	0xe000e010

0800039c <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800039c:	4770      	bx	lr

0800039e <HAL_SYSTICK_IRQHandler>:
{
 800039e:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 80003a0:	f7ff fffc 	bl	800039c <HAL_SYSTICK_Callback>
}
 80003a4:	bd10      	pop	{r4, pc}
	...

080003a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80003a8:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80003aa:	680b      	ldr	r3, [r1, #0]
{ 
 80003ac:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != RESET)
 80003ae:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00U;
 80003b0:	2300      	movs	r3, #0
{ 
 80003b2:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != RESET)
 80003b4:	9a02      	ldr	r2, [sp, #8]
 80003b6:	40da      	lsrs	r2, r3
 80003b8:	d101      	bne.n	80003be <HAL_GPIO_Init+0x16>
      }
    }
    
    position++;
  } 
}
 80003ba:	b007      	add	sp, #28
 80003bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80003be:	2201      	movs	r2, #1
 80003c0:	409a      	lsls	r2, r3
 80003c2:	9203      	str	r2, [sp, #12]
 80003c4:	9903      	ldr	r1, [sp, #12]
 80003c6:	9a02      	ldr	r2, [sp, #8]
 80003c8:	400a      	ands	r2, r1
 80003ca:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 80003cc:	d100      	bne.n	80003d0 <HAL_GPIO_Init+0x28>
 80003ce:	e08c      	b.n	80004ea <HAL_GPIO_Init+0x142>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80003d0:	9a01      	ldr	r2, [sp, #4]
 80003d2:	2110      	movs	r1, #16
 80003d4:	6852      	ldr	r2, [r2, #4]
 80003d6:	0016      	movs	r6, r2
 80003d8:	438e      	bics	r6, r1
 80003da:	2e02      	cmp	r6, #2
 80003dc:	d10e      	bne.n	80003fc <HAL_GPIO_Init+0x54>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80003de:	2507      	movs	r5, #7
 80003e0:	401d      	ands	r5, r3
 80003e2:	00ad      	lsls	r5, r5, #2
 80003e4:	3901      	subs	r1, #1
 80003e6:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3];
 80003e8:	08dc      	lsrs	r4, r3, #3
 80003ea:	00a4      	lsls	r4, r4, #2
 80003ec:	1904      	adds	r4, r0, r4
 80003ee:	6a27      	ldr	r7, [r4, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80003f0:	438f      	bics	r7, r1
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 80003f2:	9901      	ldr	r1, [sp, #4]
 80003f4:	6909      	ldr	r1, [r1, #16]
 80003f6:	40a9      	lsls	r1, r5
 80003f8:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3U] = temp;
 80003fa:	6227      	str	r7, [r4, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80003fc:	2403      	movs	r4, #3
 80003fe:	005f      	lsls	r7, r3, #1
 8000400:	40bc      	lsls	r4, r7
 8000402:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 8000404:	6805      	ldr	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000406:	3e01      	subs	r6, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000408:	4025      	ands	r5, r4
 800040a:	46ac      	mov	ip, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800040c:	2503      	movs	r5, #3
 800040e:	4015      	ands	r5, r2
 8000410:	40bd      	lsls	r5, r7
 8000412:	4661      	mov	r1, ip
 8000414:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 8000416:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000418:	2e01      	cmp	r6, #1
 800041a:	d80f      	bhi.n	800043c <HAL_GPIO_Init+0x94>
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 800041c:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR; 
 800041e:	6886      	ldr	r6, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000420:	68cd      	ldr	r5, [r1, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000422:	4026      	ands	r6, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000424:	40bd      	lsls	r5, r7
 8000426:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8000428:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 800042a:	6846      	ldr	r6, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800042c:	9903      	ldr	r1, [sp, #12]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800042e:	0915      	lsrs	r5, r2, #4
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000430:	438e      	bics	r6, r1
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000432:	2101      	movs	r1, #1
 8000434:	400d      	ands	r5, r1
 8000436:	409d      	lsls	r5, r3
 8000438:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 800043a:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 800043c:	68c5      	ldr	r5, [r0, #12]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800043e:	9901      	ldr	r1, [sp, #4]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000440:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000442:	688d      	ldr	r5, [r1, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000444:	2180      	movs	r1, #128	; 0x80
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000446:	40bd      	lsls	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000448:	0549      	lsls	r1, r1, #21
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800044a:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 800044c:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800044e:	420a      	tst	r2, r1
 8000450:	d04b      	beq.n	80004ea <HAL_GPIO_Init+0x142>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000452:	2101      	movs	r1, #1
 8000454:	4c26      	ldr	r4, [pc, #152]	; (80004f0 <HAL_GPIO_Init+0x148>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000456:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000458:	69a5      	ldr	r5, [r4, #24]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800045a:	401e      	ands	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800045c:	430d      	orrs	r5, r1
 800045e:	61a5      	str	r5, [r4, #24]
 8000460:	69a4      	ldr	r4, [r4, #24]
        temp = SYSCFG->EXTICR[position >> 2];
 8000462:	089d      	lsrs	r5, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000464:	400c      	ands	r4, r1
 8000466:	9405      	str	r4, [sp, #20]
 8000468:	9c05      	ldr	r4, [sp, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800046a:	240f      	movs	r4, #15
 800046c:	4921      	ldr	r1, [pc, #132]	; (80004f4 <HAL_GPIO_Init+0x14c>)
 800046e:	00ad      	lsls	r5, r5, #2
 8000470:	00b6      	lsls	r6, r6, #2
 8000472:	186d      	adds	r5, r5, r1
 8000474:	40b4      	lsls	r4, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000476:	2190      	movs	r1, #144	; 0x90
        temp = SYSCFG->EXTICR[position >> 2];
 8000478:	68af      	ldr	r7, [r5, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800047a:	05c9      	lsls	r1, r1, #23
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800047c:	43a7      	bics	r7, r4
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800047e:	2400      	movs	r4, #0
 8000480:	4288      	cmp	r0, r1
 8000482:	d00c      	beq.n	800049e <HAL_GPIO_Init+0xf6>
 8000484:	491c      	ldr	r1, [pc, #112]	; (80004f8 <HAL_GPIO_Init+0x150>)
 8000486:	3401      	adds	r4, #1
 8000488:	4288      	cmp	r0, r1
 800048a:	d008      	beq.n	800049e <HAL_GPIO_Init+0xf6>
 800048c:	491b      	ldr	r1, [pc, #108]	; (80004fc <HAL_GPIO_Init+0x154>)
 800048e:	3401      	adds	r4, #1
 8000490:	4288      	cmp	r0, r1
 8000492:	d004      	beq.n	800049e <HAL_GPIO_Init+0xf6>
 8000494:	491a      	ldr	r1, [pc, #104]	; (8000500 <HAL_GPIO_Init+0x158>)
 8000496:	3403      	adds	r4, #3
 8000498:	4288      	cmp	r0, r1
 800049a:	d100      	bne.n	800049e <HAL_GPIO_Init+0xf6>
 800049c:	3c02      	subs	r4, #2
 800049e:	40b4      	lsls	r4, r6
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80004a0:	9900      	ldr	r1, [sp, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80004a2:	433c      	orrs	r4, r7
          SET_BIT(temp, iocurrent); 
 80004a4:	000e      	movs	r6, r1
        SYSCFG->EXTICR[position >> 2] = temp;
 80004a6:	60ac      	str	r4, [r5, #8]
        temp = EXTI->IMR;
 80004a8:	4c16      	ldr	r4, [pc, #88]	; (8000504 <HAL_GPIO_Init+0x15c>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80004aa:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 80004ac:	6827      	ldr	r7, [r4, #0]
          SET_BIT(temp, iocurrent); 
 80004ae:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80004b0:	03d1      	lsls	r1, r2, #15
 80004b2:	d401      	bmi.n	80004b8 <HAL_GPIO_Init+0x110>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80004b4:	003e      	movs	r6, r7
 80004b6:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 80004b8:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 80004ba:	6867      	ldr	r7, [r4, #4]
          SET_BIT(temp, iocurrent); 
 80004bc:	9e00      	ldr	r6, [sp, #0]
 80004be:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80004c0:	0391      	lsls	r1, r2, #14
 80004c2:	d401      	bmi.n	80004c8 <HAL_GPIO_Init+0x120>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80004c4:	003e      	movs	r6, r7
 80004c6:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 80004c8:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 80004ca:	68a7      	ldr	r7, [r4, #8]
          SET_BIT(temp, iocurrent); 
 80004cc:	9e00      	ldr	r6, [sp, #0]
 80004ce:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80004d0:	02d1      	lsls	r1, r2, #11
 80004d2:	d401      	bmi.n	80004d8 <HAL_GPIO_Init+0x130>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80004d4:	003e      	movs	r6, r7
 80004d6:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 80004d8:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 80004da:	68e6      	ldr	r6, [r4, #12]
          SET_BIT(temp, iocurrent); 
 80004dc:	9f00      	ldr	r7, [sp, #0]
 80004de:	4337      	orrs	r7, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80004e0:	0292      	lsls	r2, r2, #10
 80004e2:	d401      	bmi.n	80004e8 <HAL_GPIO_Init+0x140>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80004e4:	402e      	ands	r6, r5
 80004e6:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 80004e8:	60e7      	str	r7, [r4, #12]
    position++;
 80004ea:	3301      	adds	r3, #1
 80004ec:	e762      	b.n	80003b4 <HAL_GPIO_Init+0xc>
 80004ee:	46c0      	nop			; (mov r8, r8)
 80004f0:	40021000 	.word	0x40021000
 80004f4:	40010000 	.word	0x40010000
 80004f8:	48000400 	.word	0x48000400
 80004fc:	48000800 	.word	0x48000800
 8000500:	48000c00 	.word	0x48000c00
 8000504:	40010400 	.word	0x40010400

08000508 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000508:	6900      	ldr	r0, [r0, #16]
 800050a:	4008      	ands	r0, r1
 800050c:	1e41      	subs	r1, r0, #1
 800050e:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8000510:	b2c0      	uxtb	r0, r0
  }
 8000512:	4770      	bx	lr

08000514 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000514:	2a00      	cmp	r2, #0
 8000516:	d001      	beq.n	800051c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000518:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800051a:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800051c:	6281      	str	r1, [r0, #40]	; 0x28
}
 800051e:	e7fc      	b.n	800051a <HAL_GPIO_WritePin+0x6>

08000520 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000520:	6943      	ldr	r3, [r0, #20]
 8000522:	4059      	eors	r1, r3
 8000524:	6141      	str	r1, [r0, #20]
}
 8000526:	4770      	bx	lr

08000528 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8000528:	4770      	bx	lr
	...

0800052c <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 800052c:	4b04      	ldr	r3, [pc, #16]	; (8000540 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 800052e:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8000530:	695a      	ldr	r2, [r3, #20]
 8000532:	4210      	tst	r0, r2
 8000534:	d002      	beq.n	800053c <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000536:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000538:	f7ff fff6 	bl	8000528 <HAL_GPIO_EXTI_Callback>
}
 800053c:	bd10      	pop	{r4, pc}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	40010400 	.word	0x40010400

08000544 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000544:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000546:	6803      	ldr	r3, [r0, #0]
{
 8000548:	b085      	sub	sp, #20
 800054a:	0005      	movs	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800054c:	07db      	lsls	r3, r3, #31
 800054e:	d42f      	bmi.n	80005b0 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000550:	682b      	ldr	r3, [r5, #0]
 8000552:	079b      	lsls	r3, r3, #30
 8000554:	d500      	bpl.n	8000558 <HAL_RCC_OscConfig+0x14>
 8000556:	e081      	b.n	800065c <HAL_RCC_OscConfig+0x118>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000558:	682b      	ldr	r3, [r5, #0]
 800055a:	071b      	lsls	r3, r3, #28
 800055c:	d500      	bpl.n	8000560 <HAL_RCC_OscConfig+0x1c>
 800055e:	e0bc      	b.n	80006da <HAL_RCC_OscConfig+0x196>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000560:	682b      	ldr	r3, [r5, #0]
 8000562:	075b      	lsls	r3, r3, #29
 8000564:	d500      	bpl.n	8000568 <HAL_RCC_OscConfig+0x24>
 8000566:	e0df      	b.n	8000728 <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000568:	682b      	ldr	r3, [r5, #0]
 800056a:	06db      	lsls	r3, r3, #27
 800056c:	d51a      	bpl.n	80005a4 <HAL_RCC_OscConfig+0x60>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800056e:	696a      	ldr	r2, [r5, #20]
 8000570:	4cb5      	ldr	r4, [pc, #724]	; (8000848 <HAL_RCC_OscConfig+0x304>)
 8000572:	2304      	movs	r3, #4
 8000574:	2a01      	cmp	r2, #1
 8000576:	d000      	beq.n	800057a <HAL_RCC_OscConfig+0x36>
 8000578:	e14b      	b.n	8000812 <HAL_RCC_OscConfig+0x2ce>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800057a:	6b61      	ldr	r1, [r4, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800057c:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 800057e:	430b      	orrs	r3, r1
 8000580:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8000582:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000584:	431a      	orrs	r2, r3
 8000586:	6362      	str	r2, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000588:	f7ff fe90 	bl	80002ac <HAL_GetTick>
 800058c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800058e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000590:	4233      	tst	r3, r6
 8000592:	d100      	bne.n	8000596 <HAL_RCC_OscConfig+0x52>
 8000594:	e136      	b.n	8000804 <HAL_RCC_OscConfig+0x2c0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000596:	21f8      	movs	r1, #248	; 0xf8
 8000598:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800059a:	69ab      	ldr	r3, [r5, #24]
 800059c:	438a      	bics	r2, r1
 800059e:	00db      	lsls	r3, r3, #3
 80005a0:	4313      	orrs	r3, r2
 80005a2:	6363      	str	r3, [r4, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80005a4:	6a29      	ldr	r1, [r5, #32]
 80005a6:	2900      	cmp	r1, #0
 80005a8:	d000      	beq.n	80005ac <HAL_RCC_OscConfig+0x68>
 80005aa:	e159      	b.n	8000860 <HAL_RCC_OscConfig+0x31c>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80005ac:	2000      	movs	r0, #0
 80005ae:	e013      	b.n	80005d8 <HAL_RCC_OscConfig+0x94>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80005b0:	210c      	movs	r1, #12
 80005b2:	4ca5      	ldr	r4, [pc, #660]	; (8000848 <HAL_RCC_OscConfig+0x304>)
 80005b4:	6862      	ldr	r2, [r4, #4]
 80005b6:	400a      	ands	r2, r1
 80005b8:	2a04      	cmp	r2, #4
 80005ba:	d006      	beq.n	80005ca <HAL_RCC_OscConfig+0x86>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80005bc:	6863      	ldr	r3, [r4, #4]
 80005be:	400b      	ands	r3, r1
 80005c0:	2b08      	cmp	r3, #8
 80005c2:	d10b      	bne.n	80005dc <HAL_RCC_OscConfig+0x98>
 80005c4:	6863      	ldr	r3, [r4, #4]
 80005c6:	03db      	lsls	r3, r3, #15
 80005c8:	d508      	bpl.n	80005dc <HAL_RCC_OscConfig+0x98>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80005ca:	6823      	ldr	r3, [r4, #0]
 80005cc:	039b      	lsls	r3, r3, #14
 80005ce:	d5bf      	bpl.n	8000550 <HAL_RCC_OscConfig+0xc>
 80005d0:	686b      	ldr	r3, [r5, #4]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d1bc      	bne.n	8000550 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80005d6:	2001      	movs	r0, #1
}
 80005d8:	b005      	add	sp, #20
 80005da:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005dc:	686b      	ldr	r3, [r5, #4]
 80005de:	2b01      	cmp	r3, #1
 80005e0:	d113      	bne.n	800060a <HAL_RCC_OscConfig+0xc6>
 80005e2:	2380      	movs	r3, #128	; 0x80
 80005e4:	6822      	ldr	r2, [r4, #0]
 80005e6:	025b      	lsls	r3, r3, #9
 80005e8:	4313      	orrs	r3, r2
 80005ea:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80005ec:	f7ff fe5e 	bl	80002ac <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80005f0:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80005f2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80005f4:	02b6      	lsls	r6, r6, #10
 80005f6:	6823      	ldr	r3, [r4, #0]
 80005f8:	4233      	tst	r3, r6
 80005fa:	d1a9      	bne.n	8000550 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005fc:	f7ff fe56 	bl	80002ac <HAL_GetTick>
 8000600:	1bc0      	subs	r0, r0, r7
 8000602:	2864      	cmp	r0, #100	; 0x64
 8000604:	d9f7      	bls.n	80005f6 <HAL_RCC_OscConfig+0xb2>
            return HAL_TIMEOUT;
 8000606:	2003      	movs	r0, #3
 8000608:	e7e6      	b.n	80005d8 <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800060a:	2b00      	cmp	r3, #0
 800060c:	d116      	bne.n	800063c <HAL_RCC_OscConfig+0xf8>
 800060e:	6823      	ldr	r3, [r4, #0]
 8000610:	4a8e      	ldr	r2, [pc, #568]	; (800084c <HAL_RCC_OscConfig+0x308>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000612:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000614:	4013      	ands	r3, r2
 8000616:	6023      	str	r3, [r4, #0]
 8000618:	6823      	ldr	r3, [r4, #0]
 800061a:	4a8d      	ldr	r2, [pc, #564]	; (8000850 <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800061c:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800061e:	4013      	ands	r3, r2
 8000620:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000622:	f7ff fe43 	bl	80002ac <HAL_GetTick>
 8000626:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000628:	6823      	ldr	r3, [r4, #0]
 800062a:	4233      	tst	r3, r6
 800062c:	d100      	bne.n	8000630 <HAL_RCC_OscConfig+0xec>
 800062e:	e78f      	b.n	8000550 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000630:	f7ff fe3c 	bl	80002ac <HAL_GetTick>
 8000634:	1bc0      	subs	r0, r0, r7
 8000636:	2864      	cmp	r0, #100	; 0x64
 8000638:	d9f6      	bls.n	8000628 <HAL_RCC_OscConfig+0xe4>
 800063a:	e7e4      	b.n	8000606 <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800063c:	2b05      	cmp	r3, #5
 800063e:	d105      	bne.n	800064c <HAL_RCC_OscConfig+0x108>
 8000640:	2380      	movs	r3, #128	; 0x80
 8000642:	6822      	ldr	r2, [r4, #0]
 8000644:	02db      	lsls	r3, r3, #11
 8000646:	4313      	orrs	r3, r2
 8000648:	6023      	str	r3, [r4, #0]
 800064a:	e7ca      	b.n	80005e2 <HAL_RCC_OscConfig+0x9e>
 800064c:	6823      	ldr	r3, [r4, #0]
 800064e:	4a7f      	ldr	r2, [pc, #508]	; (800084c <HAL_RCC_OscConfig+0x308>)
 8000650:	4013      	ands	r3, r2
 8000652:	6023      	str	r3, [r4, #0]
 8000654:	6823      	ldr	r3, [r4, #0]
 8000656:	4a7e      	ldr	r2, [pc, #504]	; (8000850 <HAL_RCC_OscConfig+0x30c>)
 8000658:	4013      	ands	r3, r2
 800065a:	e7c6      	b.n	80005ea <HAL_RCC_OscConfig+0xa6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800065c:	220c      	movs	r2, #12
 800065e:	4c7a      	ldr	r4, [pc, #488]	; (8000848 <HAL_RCC_OscConfig+0x304>)
 8000660:	6863      	ldr	r3, [r4, #4]
 8000662:	4213      	tst	r3, r2
 8000664:	d006      	beq.n	8000674 <HAL_RCC_OscConfig+0x130>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000666:	6863      	ldr	r3, [r4, #4]
 8000668:	4013      	ands	r3, r2
 800066a:	2b08      	cmp	r3, #8
 800066c:	d110      	bne.n	8000690 <HAL_RCC_OscConfig+0x14c>
 800066e:	6863      	ldr	r3, [r4, #4]
 8000670:	03db      	lsls	r3, r3, #15
 8000672:	d40d      	bmi.n	8000690 <HAL_RCC_OscConfig+0x14c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000674:	6823      	ldr	r3, [r4, #0]
 8000676:	079b      	lsls	r3, r3, #30
 8000678:	d502      	bpl.n	8000680 <HAL_RCC_OscConfig+0x13c>
 800067a:	68eb      	ldr	r3, [r5, #12]
 800067c:	2b01      	cmp	r3, #1
 800067e:	d1aa      	bne.n	80005d6 <HAL_RCC_OscConfig+0x92>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000680:	21f8      	movs	r1, #248	; 0xf8
 8000682:	6822      	ldr	r2, [r4, #0]
 8000684:	692b      	ldr	r3, [r5, #16]
 8000686:	438a      	bics	r2, r1
 8000688:	00db      	lsls	r3, r3, #3
 800068a:	4313      	orrs	r3, r2
 800068c:	6023      	str	r3, [r4, #0]
 800068e:	e763      	b.n	8000558 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000690:	68ea      	ldr	r2, [r5, #12]
 8000692:	2301      	movs	r3, #1
 8000694:	2a00      	cmp	r2, #0
 8000696:	d00f      	beq.n	80006b8 <HAL_RCC_OscConfig+0x174>
        __HAL_RCC_HSI_ENABLE();
 8000698:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800069a:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 800069c:	4313      	orrs	r3, r2
 800069e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80006a0:	f7ff fe04 	bl	80002ac <HAL_GetTick>
 80006a4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80006a6:	6823      	ldr	r3, [r4, #0]
 80006a8:	4233      	tst	r3, r6
 80006aa:	d1e9      	bne.n	8000680 <HAL_RCC_OscConfig+0x13c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006ac:	f7ff fdfe 	bl	80002ac <HAL_GetTick>
 80006b0:	1bc0      	subs	r0, r0, r7
 80006b2:	2802      	cmp	r0, #2
 80006b4:	d9f7      	bls.n	80006a6 <HAL_RCC_OscConfig+0x162>
 80006b6:	e7a6      	b.n	8000606 <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_HSI_DISABLE();
 80006b8:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80006ba:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 80006bc:	439a      	bics	r2, r3
 80006be:	6022      	str	r2, [r4, #0]
        tickstart = HAL_GetTick();
 80006c0:	f7ff fdf4 	bl	80002ac <HAL_GetTick>
 80006c4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80006c6:	6823      	ldr	r3, [r4, #0]
 80006c8:	4233      	tst	r3, r6
 80006ca:	d100      	bne.n	80006ce <HAL_RCC_OscConfig+0x18a>
 80006cc:	e744      	b.n	8000558 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006ce:	f7ff fded 	bl	80002ac <HAL_GetTick>
 80006d2:	1bc0      	subs	r0, r0, r7
 80006d4:	2802      	cmp	r0, #2
 80006d6:	d9f6      	bls.n	80006c6 <HAL_RCC_OscConfig+0x182>
 80006d8:	e795      	b.n	8000606 <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80006da:	69ea      	ldr	r2, [r5, #28]
 80006dc:	2301      	movs	r3, #1
 80006de:	4c5a      	ldr	r4, [pc, #360]	; (8000848 <HAL_RCC_OscConfig+0x304>)
 80006e0:	2a00      	cmp	r2, #0
 80006e2:	d010      	beq.n	8000706 <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_ENABLE();
 80006e4:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80006e6:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 80006e8:	4313      	orrs	r3, r2
 80006ea:	6263      	str	r3, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 80006ec:	f7ff fdde 	bl	80002ac <HAL_GetTick>
 80006f0:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80006f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80006f4:	4233      	tst	r3, r6
 80006f6:	d000      	beq.n	80006fa <HAL_RCC_OscConfig+0x1b6>
 80006f8:	e732      	b.n	8000560 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80006fa:	f7ff fdd7 	bl	80002ac <HAL_GetTick>
 80006fe:	1bc0      	subs	r0, r0, r7
 8000700:	2802      	cmp	r0, #2
 8000702:	d9f6      	bls.n	80006f2 <HAL_RCC_OscConfig+0x1ae>
 8000704:	e77f      	b.n	8000606 <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_LSI_DISABLE();
 8000706:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000708:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 800070a:	439a      	bics	r2, r3
 800070c:	6262      	str	r2, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 800070e:	f7ff fdcd 	bl	80002ac <HAL_GetTick>
 8000712:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000714:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000716:	4233      	tst	r3, r6
 8000718:	d100      	bne.n	800071c <HAL_RCC_OscConfig+0x1d8>
 800071a:	e721      	b.n	8000560 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800071c:	f7ff fdc6 	bl	80002ac <HAL_GetTick>
 8000720:	1bc0      	subs	r0, r0, r7
 8000722:	2802      	cmp	r0, #2
 8000724:	d9f6      	bls.n	8000714 <HAL_RCC_OscConfig+0x1d0>
 8000726:	e76e      	b.n	8000606 <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000728:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 800072a:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800072c:	4c46      	ldr	r4, [pc, #280]	; (8000848 <HAL_RCC_OscConfig+0x304>)
 800072e:	0552      	lsls	r2, r2, #21
 8000730:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000732:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000734:	4213      	tst	r3, r2
 8000736:	d108      	bne.n	800074a <HAL_RCC_OscConfig+0x206>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000738:	69e3      	ldr	r3, [r4, #28]
 800073a:	4313      	orrs	r3, r2
 800073c:	61e3      	str	r3, [r4, #28]
 800073e:	69e3      	ldr	r3, [r4, #28]
 8000740:	4013      	ands	r3, r2
 8000742:	9303      	str	r3, [sp, #12]
 8000744:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8000746:	2301      	movs	r3, #1
 8000748:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800074a:	2780      	movs	r7, #128	; 0x80
 800074c:	4e41      	ldr	r6, [pc, #260]	; (8000854 <HAL_RCC_OscConfig+0x310>)
 800074e:	007f      	lsls	r7, r7, #1
 8000750:	6833      	ldr	r3, [r6, #0]
 8000752:	423b      	tst	r3, r7
 8000754:	d006      	beq.n	8000764 <HAL_RCC_OscConfig+0x220>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000756:	68ab      	ldr	r3, [r5, #8]
 8000758:	2b01      	cmp	r3, #1
 800075a:	d113      	bne.n	8000784 <HAL_RCC_OscConfig+0x240>
 800075c:	6a22      	ldr	r2, [r4, #32]
 800075e:	4313      	orrs	r3, r2
 8000760:	6223      	str	r3, [r4, #32]
 8000762:	e030      	b.n	80007c6 <HAL_RCC_OscConfig+0x282>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000764:	6833      	ldr	r3, [r6, #0]
 8000766:	433b      	orrs	r3, r7
 8000768:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800076a:	f7ff fd9f 	bl	80002ac <HAL_GetTick>
 800076e:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000770:	6833      	ldr	r3, [r6, #0]
 8000772:	423b      	tst	r3, r7
 8000774:	d1ef      	bne.n	8000756 <HAL_RCC_OscConfig+0x212>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000776:	f7ff fd99 	bl	80002ac <HAL_GetTick>
 800077a:	9b01      	ldr	r3, [sp, #4]
 800077c:	1ac0      	subs	r0, r0, r3
 800077e:	2864      	cmp	r0, #100	; 0x64
 8000780:	d9f6      	bls.n	8000770 <HAL_RCC_OscConfig+0x22c>
 8000782:	e740      	b.n	8000606 <HAL_RCC_OscConfig+0xc2>
 8000784:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000786:	2b00      	cmp	r3, #0
 8000788:	d114      	bne.n	80007b4 <HAL_RCC_OscConfig+0x270>
 800078a:	6a23      	ldr	r3, [r4, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800078c:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800078e:	4393      	bics	r3, r2
 8000790:	6223      	str	r3, [r4, #32]
 8000792:	6a23      	ldr	r3, [r4, #32]
 8000794:	3203      	adds	r2, #3
 8000796:	4393      	bics	r3, r2
 8000798:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800079a:	f7ff fd87 	bl	80002ac <HAL_GetTick>
 800079e:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80007a0:	6a23      	ldr	r3, [r4, #32]
 80007a2:	423b      	tst	r3, r7
 80007a4:	d025      	beq.n	80007f2 <HAL_RCC_OscConfig+0x2ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80007a6:	f7ff fd81 	bl	80002ac <HAL_GetTick>
 80007aa:	4b2b      	ldr	r3, [pc, #172]	; (8000858 <HAL_RCC_OscConfig+0x314>)
 80007ac:	1b80      	subs	r0, r0, r6
 80007ae:	4298      	cmp	r0, r3
 80007b0:	d9f6      	bls.n	80007a0 <HAL_RCC_OscConfig+0x25c>
 80007b2:	e728      	b.n	8000606 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007b4:	2b05      	cmp	r3, #5
 80007b6:	d10b      	bne.n	80007d0 <HAL_RCC_OscConfig+0x28c>
 80007b8:	6a21      	ldr	r1, [r4, #32]
 80007ba:	3b01      	subs	r3, #1
 80007bc:	430b      	orrs	r3, r1
 80007be:	6223      	str	r3, [r4, #32]
 80007c0:	6a23      	ldr	r3, [r4, #32]
 80007c2:	431a      	orrs	r2, r3
 80007c4:	6222      	str	r2, [r4, #32]
      tickstart = HAL_GetTick();
 80007c6:	f7ff fd71 	bl	80002ac <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80007ca:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 80007cc:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80007ce:	e00d      	b.n	80007ec <HAL_RCC_OscConfig+0x2a8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007d0:	6a23      	ldr	r3, [r4, #32]
 80007d2:	4393      	bics	r3, r2
 80007d4:	2204      	movs	r2, #4
 80007d6:	6223      	str	r3, [r4, #32]
 80007d8:	6a23      	ldr	r3, [r4, #32]
 80007da:	4393      	bics	r3, r2
 80007dc:	e7c0      	b.n	8000760 <HAL_RCC_OscConfig+0x21c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80007de:	f7ff fd65 	bl	80002ac <HAL_GetTick>
 80007e2:	4b1d      	ldr	r3, [pc, #116]	; (8000858 <HAL_RCC_OscConfig+0x314>)
 80007e4:	1b80      	subs	r0, r0, r6
 80007e6:	4298      	cmp	r0, r3
 80007e8:	d900      	bls.n	80007ec <HAL_RCC_OscConfig+0x2a8>
 80007ea:	e70c      	b.n	8000606 <HAL_RCC_OscConfig+0xc2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80007ec:	6a23      	ldr	r3, [r4, #32]
 80007ee:	423b      	tst	r3, r7
 80007f0:	d0f5      	beq.n	80007de <HAL_RCC_OscConfig+0x29a>
    if(pwrclkchanged == SET)
 80007f2:	9b00      	ldr	r3, [sp, #0]
 80007f4:	2b01      	cmp	r3, #1
 80007f6:	d000      	beq.n	80007fa <HAL_RCC_OscConfig+0x2b6>
 80007f8:	e6b6      	b.n	8000568 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80007fa:	69e3      	ldr	r3, [r4, #28]
 80007fc:	4a17      	ldr	r2, [pc, #92]	; (800085c <HAL_RCC_OscConfig+0x318>)
 80007fe:	4013      	ands	r3, r2
 8000800:	61e3      	str	r3, [r4, #28]
 8000802:	e6b1      	b.n	8000568 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000804:	f7ff fd52 	bl	80002ac <HAL_GetTick>
 8000808:	1bc0      	subs	r0, r0, r7
 800080a:	2802      	cmp	r0, #2
 800080c:	d800      	bhi.n	8000810 <HAL_RCC_OscConfig+0x2cc>
 800080e:	e6be      	b.n	800058e <HAL_RCC_OscConfig+0x4a>
 8000810:	e6f9      	b.n	8000606 <HAL_RCC_OscConfig+0xc2>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000812:	3205      	adds	r2, #5
 8000814:	d103      	bne.n	800081e <HAL_RCC_OscConfig+0x2da>
      __HAL_RCC_HSI14ADC_ENABLE();
 8000816:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000818:	439a      	bics	r2, r3
 800081a:	6362      	str	r2, [r4, #52]	; 0x34
 800081c:	e6bb      	b.n	8000596 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSI14ADC_DISABLE();
 800081e:	6b62      	ldr	r2, [r4, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000820:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000822:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8000824:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8000826:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8000828:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800082a:	4393      	bics	r3, r2
 800082c:	6363      	str	r3, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 800082e:	f7ff fd3d 	bl	80002ac <HAL_GetTick>
 8000832:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000834:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000836:	4233      	tst	r3, r6
 8000838:	d100      	bne.n	800083c <HAL_RCC_OscConfig+0x2f8>
 800083a:	e6b3      	b.n	80005a4 <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800083c:	f7ff fd36 	bl	80002ac <HAL_GetTick>
 8000840:	1bc0      	subs	r0, r0, r7
 8000842:	2802      	cmp	r0, #2
 8000844:	d9f6      	bls.n	8000834 <HAL_RCC_OscConfig+0x2f0>
 8000846:	e6de      	b.n	8000606 <HAL_RCC_OscConfig+0xc2>
 8000848:	40021000 	.word	0x40021000
 800084c:	fffeffff 	.word	0xfffeffff
 8000850:	fffbffff 	.word	0xfffbffff
 8000854:	40007000 	.word	0x40007000
 8000858:	00001388 	.word	0x00001388
 800085c:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000860:	220c      	movs	r2, #12
 8000862:	4c26      	ldr	r4, [pc, #152]	; (80008fc <HAL_RCC_OscConfig+0x3b8>)
      return HAL_ERROR;
 8000864:	2001      	movs	r0, #1
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000866:	6863      	ldr	r3, [r4, #4]
 8000868:	4013      	ands	r3, r2
 800086a:	2b08      	cmp	r3, #8
 800086c:	d100      	bne.n	8000870 <HAL_RCC_OscConfig+0x32c>
 800086e:	e6b3      	b.n	80005d8 <HAL_RCC_OscConfig+0x94>
        __HAL_RCC_PLL_DISABLE();
 8000870:	6823      	ldr	r3, [r4, #0]
 8000872:	4a23      	ldr	r2, [pc, #140]	; (8000900 <HAL_RCC_OscConfig+0x3bc>)
 8000874:	4013      	ands	r3, r2
 8000876:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000878:	2902      	cmp	r1, #2
 800087a:	d12f      	bne.n	80008dc <HAL_RCC_OscConfig+0x398>
        tickstart = HAL_GetTick();
 800087c:	f7ff fd16 	bl	80002ac <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000880:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000882:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000884:	04b6      	lsls	r6, r6, #18
 8000886:	6823      	ldr	r3, [r4, #0]
 8000888:	4233      	tst	r3, r6
 800088a:	d121      	bne.n	80008d0 <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800088c:	220f      	movs	r2, #15
 800088e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000890:	4393      	bics	r3, r2
 8000892:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000894:	4313      	orrs	r3, r2
 8000896:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000898:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800089a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800089c:	6862      	ldr	r2, [r4, #4]
 800089e:	430b      	orrs	r3, r1
 80008a0:	4918      	ldr	r1, [pc, #96]	; (8000904 <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80008a2:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80008a4:	400a      	ands	r2, r1
 80008a6:	4313      	orrs	r3, r2
 80008a8:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80008aa:	2380      	movs	r3, #128	; 0x80
 80008ac:	6822      	ldr	r2, [r4, #0]
 80008ae:	045b      	lsls	r3, r3, #17
 80008b0:	4313      	orrs	r3, r2
 80008b2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80008b4:	f7ff fcfa 	bl	80002ac <HAL_GetTick>
 80008b8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80008ba:	04ad      	lsls	r5, r5, #18
 80008bc:	6823      	ldr	r3, [r4, #0]
 80008be:	422b      	tst	r3, r5
 80008c0:	d000      	beq.n	80008c4 <HAL_RCC_OscConfig+0x380>
 80008c2:	e673      	b.n	80005ac <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80008c4:	f7ff fcf2 	bl	80002ac <HAL_GetTick>
 80008c8:	1b80      	subs	r0, r0, r6
 80008ca:	2802      	cmp	r0, #2
 80008cc:	d9f6      	bls.n	80008bc <HAL_RCC_OscConfig+0x378>
 80008ce:	e69a      	b.n	8000606 <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80008d0:	f7ff fcec 	bl	80002ac <HAL_GetTick>
 80008d4:	1bc0      	subs	r0, r0, r7
 80008d6:	2802      	cmp	r0, #2
 80008d8:	d9d5      	bls.n	8000886 <HAL_RCC_OscConfig+0x342>
 80008da:	e694      	b.n	8000606 <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 80008dc:	f7ff fce6 	bl	80002ac <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80008e0:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 80008e2:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80008e4:	04ad      	lsls	r5, r5, #18
 80008e6:	6823      	ldr	r3, [r4, #0]
 80008e8:	422b      	tst	r3, r5
 80008ea:	d100      	bne.n	80008ee <HAL_RCC_OscConfig+0x3aa>
 80008ec:	e65e      	b.n	80005ac <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80008ee:	f7ff fcdd 	bl	80002ac <HAL_GetTick>
 80008f2:	1b80      	subs	r0, r0, r6
 80008f4:	2802      	cmp	r0, #2
 80008f6:	d9f6      	bls.n	80008e6 <HAL_RCC_OscConfig+0x3a2>
 80008f8:	e685      	b.n	8000606 <HAL_RCC_OscConfig+0xc2>
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	40021000 	.word	0x40021000
 8000900:	feffffff 	.word	0xfeffffff
 8000904:	ffc2ffff 	.word	0xffc2ffff

08000908 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000908:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800090a:	4c14      	ldr	r4, [pc, #80]	; (800095c <HAL_RCC_GetSysClockFreq+0x54>)
{
 800090c:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800090e:	2210      	movs	r2, #16
 8000910:	0021      	movs	r1, r4
 8000912:	4668      	mov	r0, sp
 8000914:	f000 fc7c 	bl	8001210 <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8000918:	0021      	movs	r1, r4
 800091a:	ad04      	add	r5, sp, #16
 800091c:	2210      	movs	r2, #16
 800091e:	3110      	adds	r1, #16
 8000920:	0028      	movs	r0, r5
 8000922:	f000 fc75 	bl	8001210 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000926:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8000928:	4e0d      	ldr	r6, [pc, #52]	; (8000960 <HAL_RCC_GetSysClockFreq+0x58>)
 800092a:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800092c:	401a      	ands	r2, r3
 800092e:	2a08      	cmp	r2, #8
 8000930:	d111      	bne.n	8000956 <HAL_RCC_GetSysClockFreq+0x4e>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000932:	200f      	movs	r0, #15
 8000934:	466a      	mov	r2, sp
 8000936:	0c99      	lsrs	r1, r3, #18
 8000938:	4001      	ands	r1, r0
 800093a:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800093c:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800093e:	4002      	ands	r2, r0
 8000940:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8000942:	03db      	lsls	r3, r3, #15
 8000944:	d505      	bpl.n	8000952 <HAL_RCC_GetSysClockFreq+0x4a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000946:	4807      	ldr	r0, [pc, #28]	; (8000964 <HAL_RCC_GetSysClockFreq+0x5c>)
 8000948:	f7ff fbfa 	bl	8000140 <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 800094c:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800094e:	b008      	add	sp, #32
 8000950:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8000952:	4805      	ldr	r0, [pc, #20]	; (8000968 <HAL_RCC_GetSysClockFreq+0x60>)
 8000954:	e7fa      	b.n	800094c <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSE_VALUE;
 8000956:	4803      	ldr	r0, [pc, #12]	; (8000964 <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 8000958:	e7f9      	b.n	800094e <HAL_RCC_GetSysClockFreq+0x46>
 800095a:	46c0      	nop			; (mov r8, r8)
 800095c:	0800123c 	.word	0x0800123c
 8000960:	40021000 	.word	0x40021000
 8000964:	007a1200 	.word	0x007a1200
 8000968:	003d0900 	.word	0x003d0900

0800096c <HAL_RCC_ClockConfig>:
{
 800096c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800096e:	2201      	movs	r2, #1
 8000970:	4c43      	ldr	r4, [pc, #268]	; (8000a80 <HAL_RCC_ClockConfig+0x114>)
{
 8000972:	0006      	movs	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000974:	6823      	ldr	r3, [r4, #0]
{
 8000976:	000f      	movs	r7, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000978:	4013      	ands	r3, r2
 800097a:	428b      	cmp	r3, r1
 800097c:	d31c      	bcc.n	80009b8 <HAL_RCC_ClockConfig+0x4c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800097e:	6832      	ldr	r2, [r6, #0]
 8000980:	0793      	lsls	r3, r2, #30
 8000982:	d423      	bmi.n	80009cc <HAL_RCC_ClockConfig+0x60>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000984:	07d3      	lsls	r3, r2, #31
 8000986:	d429      	bmi.n	80009dc <HAL_RCC_ClockConfig+0x70>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000988:	2301      	movs	r3, #1
 800098a:	6822      	ldr	r2, [r4, #0]
 800098c:	401a      	ands	r2, r3
 800098e:	4297      	cmp	r7, r2
 8000990:	d367      	bcc.n	8000a62 <HAL_RCC_ClockConfig+0xf6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000992:	6833      	ldr	r3, [r6, #0]
 8000994:	4c3b      	ldr	r4, [pc, #236]	; (8000a84 <HAL_RCC_ClockConfig+0x118>)
 8000996:	075b      	lsls	r3, r3, #29
 8000998:	d46a      	bmi.n	8000a70 <HAL_RCC_ClockConfig+0x104>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800099a:	f7ff ffb5 	bl	8000908 <HAL_RCC_GetSysClockFreq>
 800099e:	6863      	ldr	r3, [r4, #4]
 80009a0:	4a39      	ldr	r2, [pc, #228]	; (8000a88 <HAL_RCC_ClockConfig+0x11c>)
 80009a2:	061b      	lsls	r3, r3, #24
 80009a4:	0f1b      	lsrs	r3, r3, #28
 80009a6:	5cd3      	ldrb	r3, [r2, r3]
 80009a8:	40d8      	lsrs	r0, r3
 80009aa:	4b38      	ldr	r3, [pc, #224]	; (8000a8c <HAL_RCC_ClockConfig+0x120>)
 80009ac:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80009ae:	2000      	movs	r0, #0
 80009b0:	f7ff fc52 	bl	8000258 <HAL_InitTick>
  return HAL_OK;
 80009b4:	2000      	movs	r0, #0
 80009b6:	e008      	b.n	80009ca <HAL_RCC_ClockConfig+0x5e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80009b8:	6823      	ldr	r3, [r4, #0]
 80009ba:	4393      	bics	r3, r2
 80009bc:	430b      	orrs	r3, r1
 80009be:	6023      	str	r3, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80009c0:	6823      	ldr	r3, [r4, #0]
 80009c2:	4013      	ands	r3, r2
 80009c4:	4299      	cmp	r1, r3
 80009c6:	d0da      	beq.n	800097e <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 80009c8:	2001      	movs	r0, #1
}
 80009ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80009cc:	20f0      	movs	r0, #240	; 0xf0
 80009ce:	492d      	ldr	r1, [pc, #180]	; (8000a84 <HAL_RCC_ClockConfig+0x118>)
 80009d0:	684b      	ldr	r3, [r1, #4]
 80009d2:	4383      	bics	r3, r0
 80009d4:	68b0      	ldr	r0, [r6, #8]
 80009d6:	4303      	orrs	r3, r0
 80009d8:	604b      	str	r3, [r1, #4]
 80009da:	e7d3      	b.n	8000984 <HAL_RCC_ClockConfig+0x18>
 80009dc:	4d29      	ldr	r5, [pc, #164]	; (8000a84 <HAL_RCC_ClockConfig+0x118>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80009de:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009e0:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80009e2:	2a01      	cmp	r2, #1
 80009e4:	d11a      	bne.n	8000a1c <HAL_RCC_ClockConfig+0xb0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009e6:	039b      	lsls	r3, r3, #14
 80009e8:	d5ee      	bpl.n	80009c8 <HAL_RCC_ClockConfig+0x5c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80009ea:	2103      	movs	r1, #3
 80009ec:	686b      	ldr	r3, [r5, #4]
 80009ee:	438b      	bics	r3, r1
 80009f0:	4313      	orrs	r3, r2
 80009f2:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80009f4:	f7ff fc5a 	bl	80002ac <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80009f8:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80009fa:	9001      	str	r0, [sp, #4]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d115      	bne.n	8000a2c <HAL_RCC_ClockConfig+0xc0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000a00:	220c      	movs	r2, #12
 8000a02:	686b      	ldr	r3, [r5, #4]
 8000a04:	4013      	ands	r3, r2
 8000a06:	2b04      	cmp	r3, #4
 8000a08:	d0be      	beq.n	8000988 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a0a:	f7ff fc4f 	bl	80002ac <HAL_GetTick>
 8000a0e:	9b01      	ldr	r3, [sp, #4]
 8000a10:	1ac0      	subs	r0, r0, r3
 8000a12:	4b1f      	ldr	r3, [pc, #124]	; (8000a90 <HAL_RCC_ClockConfig+0x124>)
 8000a14:	4298      	cmp	r0, r3
 8000a16:	d9f3      	bls.n	8000a00 <HAL_RCC_ClockConfig+0x94>
          return HAL_TIMEOUT;
 8000a18:	2003      	movs	r0, #3
 8000a1a:	e7d6      	b.n	80009ca <HAL_RCC_ClockConfig+0x5e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000a1c:	2a02      	cmp	r2, #2
 8000a1e:	d102      	bne.n	8000a26 <HAL_RCC_ClockConfig+0xba>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000a20:	019b      	lsls	r3, r3, #6
 8000a22:	d4e2      	bmi.n	80009ea <HAL_RCC_ClockConfig+0x7e>
 8000a24:	e7d0      	b.n	80009c8 <HAL_RCC_ClockConfig+0x5c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a26:	079b      	lsls	r3, r3, #30
 8000a28:	d4df      	bmi.n	80009ea <HAL_RCC_ClockConfig+0x7e>
 8000a2a:	e7cd      	b.n	80009c8 <HAL_RCC_ClockConfig+0x5c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000a2c:	2b02      	cmp	r3, #2
 8000a2e:	d012      	beq.n	8000a56 <HAL_RCC_ClockConfig+0xea>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000a30:	220c      	movs	r2, #12
 8000a32:	686b      	ldr	r3, [r5, #4]
 8000a34:	4213      	tst	r3, r2
 8000a36:	d0a7      	beq.n	8000988 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a38:	f7ff fc38 	bl	80002ac <HAL_GetTick>
 8000a3c:	9b01      	ldr	r3, [sp, #4]
 8000a3e:	1ac0      	subs	r0, r0, r3
 8000a40:	4b13      	ldr	r3, [pc, #76]	; (8000a90 <HAL_RCC_ClockConfig+0x124>)
 8000a42:	4298      	cmp	r0, r3
 8000a44:	d9f4      	bls.n	8000a30 <HAL_RCC_ClockConfig+0xc4>
 8000a46:	e7e7      	b.n	8000a18 <HAL_RCC_ClockConfig+0xac>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a48:	f7ff fc30 	bl	80002ac <HAL_GetTick>
 8000a4c:	9b01      	ldr	r3, [sp, #4]
 8000a4e:	1ac0      	subs	r0, r0, r3
 8000a50:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <HAL_RCC_ClockConfig+0x124>)
 8000a52:	4298      	cmp	r0, r3
 8000a54:	d8e0      	bhi.n	8000a18 <HAL_RCC_ClockConfig+0xac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000a56:	220c      	movs	r2, #12
 8000a58:	686b      	ldr	r3, [r5, #4]
 8000a5a:	4013      	ands	r3, r2
 8000a5c:	2b08      	cmp	r3, #8
 8000a5e:	d1f3      	bne.n	8000a48 <HAL_RCC_ClockConfig+0xdc>
 8000a60:	e792      	b.n	8000988 <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a62:	6822      	ldr	r2, [r4, #0]
 8000a64:	439a      	bics	r2, r3
 8000a66:	6022      	str	r2, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000a68:	6822      	ldr	r2, [r4, #0]
 8000a6a:	421a      	tst	r2, r3
 8000a6c:	d1ac      	bne.n	80009c8 <HAL_RCC_ClockConfig+0x5c>
 8000a6e:	e790      	b.n	8000992 <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000a70:	6863      	ldr	r3, [r4, #4]
 8000a72:	4a08      	ldr	r2, [pc, #32]	; (8000a94 <HAL_RCC_ClockConfig+0x128>)
 8000a74:	4013      	ands	r3, r2
 8000a76:	68f2      	ldr	r2, [r6, #12]
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	6063      	str	r3, [r4, #4]
 8000a7c:	e78d      	b.n	800099a <HAL_RCC_ClockConfig+0x2e>
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	40022000 	.word	0x40022000
 8000a84:	40021000 	.word	0x40021000
 8000a88:	08001272 	.word	0x08001272
 8000a8c:	20000000 	.word	0x20000000
 8000a90:	00001388 	.word	0x00001388
 8000a94:	fffff8ff 	.word	0xfffff8ff

08000a98 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8000a98:	4b01      	ldr	r3, [pc, #4]	; (8000aa0 <HAL_RCC_GetHCLKFreq+0x8>)
 8000a9a:	6818      	ldr	r0, [r3, #0]
}
 8000a9c:	4770      	bx	lr
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	20000000 	.word	0x20000000

08000aa4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8000aa4:	4b04      	ldr	r3, [pc, #16]	; (8000ab8 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000aa6:	4a05      	ldr	r2, [pc, #20]	; (8000abc <HAL_RCC_GetPCLK1Freq+0x18>)
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	055b      	lsls	r3, r3, #21
 8000aac:	0f5b      	lsrs	r3, r3, #29
 8000aae:	5cd3      	ldrb	r3, [r2, r3]
 8000ab0:	4a03      	ldr	r2, [pc, #12]	; (8000ac0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000ab2:	6810      	ldr	r0, [r2, #0]
 8000ab4:	40d8      	lsrs	r0, r3
}    
 8000ab6:	4770      	bx	lr
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	08001282 	.word	0x08001282
 8000ac0:	20000000 	.word	0x20000000

08000ac4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000ac4:	b570      	push	{r4, r5, r6, lr}
 8000ac6:	0004      	movs	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000ac8:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000aca:	69c2      	ldr	r2, [r0, #28]
 8000acc:	6883      	ldr	r3, [r0, #8]
 8000ace:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000ad0:	6829      	ldr	r1, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000ad2:	4303      	orrs	r3, r0
 8000ad4:	6960      	ldr	r0, [r4, #20]
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000ad6:	4e3f      	ldr	r6, [pc, #252]	; (8000bd4 <UART_SetConfig+0x110>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000ad8:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000ada:	483f      	ldr	r0, [pc, #252]	; (8000bd8 <UART_SetConfig+0x114>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000adc:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000ade:	4001      	ands	r1, r0
 8000ae0:	430b      	orrs	r3, r1
 8000ae2:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000ae4:	686b      	ldr	r3, [r5, #4]
 8000ae6:	493d      	ldr	r1, [pc, #244]	; (8000bdc <UART_SetConfig+0x118>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000ae8:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000aea:	400b      	ands	r3, r1
 8000aec:	68e1      	ldr	r1, [r4, #12]
 8000aee:	430b      	orrs	r3, r1
 8000af0:	606b      	str	r3, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000af2:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000af4:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000af6:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000af8:	4839      	ldr	r0, [pc, #228]	; (8000be0 <UART_SetConfig+0x11c>)
 8000afa:	4001      	ands	r1, r0
 8000afc:	430b      	orrs	r3, r1
 8000afe:	60ab      	str	r3, [r5, #8]
 8000b00:	2380      	movs	r3, #128	; 0x80
 8000b02:	021b      	lsls	r3, r3, #8
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000b04:	42b5      	cmp	r5, r6
 8000b06:	d110      	bne.n	8000b2a <UART_SetConfig+0x66>
 8000b08:	2003      	movs	r0, #3
 8000b0a:	4936      	ldr	r1, [pc, #216]	; (8000be4 <UART_SetConfig+0x120>)
 8000b0c:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8000b0e:	4001      	ands	r1, r0
 8000b10:	4835      	ldr	r0, [pc, #212]	; (8000be8 <UART_SetConfig+0x124>)
 8000b12:	5c40      	ldrb	r0, [r0, r1]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d013      	beq.n	8000b40 <UART_SetConfig+0x7c>
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
  }
  else
  {
    switch (clocksource)
 8000b18:	2808      	cmp	r0, #8
 8000b1a:	d858      	bhi.n	8000bce <UART_SetConfig+0x10a>
 8000b1c:	f7ff fb06 	bl	800012c <__gnu_thumb1_case_uqi>
 8000b20:	57425737 	.word	0x57425737
 8000b24:	5757574b 	.word	0x5757574b
 8000b28:	50          	.byte	0x50
 8000b29:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000b2a:	4930      	ldr	r1, [pc, #192]	; (8000bec <UART_SetConfig+0x128>)
 8000b2c:	428d      	cmp	r5, r1
 8000b2e:	d14c      	bne.n	8000bca <UART_SetConfig+0x106>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000b30:	429a      	cmp	r2, r3
 8000b32:	d12c      	bne.n	8000b8e <UART_SetConfig+0xca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8000b34:	f7ff ffb6 	bl	8000aa4 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8000b38:	6863      	ldr	r3, [r4, #4]
 8000b3a:	0040      	lsls	r0, r0, #1
 8000b3c:	085b      	lsrs	r3, r3, #1
 8000b3e:	e00b      	b.n	8000b58 <UART_SetConfig+0x94>
    switch (clocksource)
 8000b40:	2808      	cmp	r0, #8
 8000b42:	d821      	bhi.n	8000b88 <UART_SetConfig+0xc4>
 8000b44:	f7ff fae8 	bl	8000118 <__gnu_thumb1_case_sqi>
 8000b48:	200520f6 	.word	0x200520f6
 8000b4c:	20202018 	.word	0x20202018
 8000b50:	1b          	.byte	0x1b
 8000b51:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8000b52:	6863      	ldr	r3, [r4, #4]
 8000b54:	0858      	lsrs	r0, r3, #1
 8000b56:	4b26      	ldr	r3, [pc, #152]	; (8000bf0 <UART_SetConfig+0x12c>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8000b58:	18c0      	adds	r0, r0, r3
 8000b5a:	6861      	ldr	r1, [r4, #4]
 8000b5c:	f7ff faf0 	bl	8000140 <__udivsi3>
 8000b60:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8000b62:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 8000b64:	220f      	movs	r2, #15
 8000b66:	0019      	movs	r1, r3
 8000b68:	4391      	bics	r1, r2
 8000b6a:	000a      	movs	r2, r1
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8000b6c:	071b      	lsls	r3, r3, #28
    huart->Instance->BRR = brrtemp;
 8000b6e:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8000b70:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 8000b72:	4313      	orrs	r3, r2
 8000b74:	60cb      	str	r3, [r1, #12]
    }
  }

  return ret;

}
 8000b76:	bd70      	pop	{r4, r5, r6, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8000b78:	f7ff fec6 	bl	8000908 <HAL_RCC_GetSysClockFreq>
 8000b7c:	e7dc      	b.n	8000b38 <UART_SetConfig+0x74>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8000b7e:	6863      	ldr	r3, [r4, #4]
 8000b80:	0858      	lsrs	r0, r3, #1
 8000b82:	2380      	movs	r3, #128	; 0x80
 8000b84:	025b      	lsls	r3, r3, #9
 8000b86:	e7e7      	b.n	8000b58 <UART_SetConfig+0x94>
        ret = HAL_ERROR;
 8000b88:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	e7ea      	b.n	8000b64 <UART_SetConfig+0xa0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8000b8e:	f7ff ff89 	bl	8000aa4 <HAL_RCC_GetPCLK1Freq>
 8000b92:	6861      	ldr	r1, [r4, #4]
 8000b94:	084b      	lsrs	r3, r1, #1
 8000b96:	1818      	adds	r0, r3, r0
 8000b98:	f7ff fad2 	bl	8000140 <__udivsi3>
 8000b9c:	b280      	uxth	r0, r0
 8000b9e:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8000ba0:	2000      	movs	r0, #0
        break;
 8000ba2:	e7e8      	b.n	8000b76 <UART_SetConfig+0xb2>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8000ba4:	6861      	ldr	r1, [r4, #4]
 8000ba6:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <UART_SetConfig+0x130>)
 8000ba8:	0848      	lsrs	r0, r1, #1
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8000baa:	18c0      	adds	r0, r0, r3
 8000bac:	f7ff fac8 	bl	8000140 <__udivsi3>
 8000bb0:	b280      	uxth	r0, r0
 8000bb2:	60f0      	str	r0, [r6, #12]
 8000bb4:	e7f4      	b.n	8000ba0 <UART_SetConfig+0xdc>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8000bb6:	f7ff fea7 	bl	8000908 <HAL_RCC_GetSysClockFreq>
 8000bba:	6861      	ldr	r1, [r4, #4]
 8000bbc:	084b      	lsrs	r3, r1, #1
 8000bbe:	e7f4      	b.n	8000baa <UART_SetConfig+0xe6>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8000bc0:	2380      	movs	r3, #128	; 0x80
 8000bc2:	6861      	ldr	r1, [r4, #4]
 8000bc4:	021b      	lsls	r3, r3, #8
 8000bc6:	0848      	lsrs	r0, r1, #1
 8000bc8:	e7ef      	b.n	8000baa <UART_SetConfig+0xe6>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000bca:	429a      	cmp	r2, r3
 8000bcc:	d0dc      	beq.n	8000b88 <UART_SetConfig+0xc4>
        ret = HAL_ERROR;
 8000bce:	2001      	movs	r0, #1
  return ret;
 8000bd0:	e7d1      	b.n	8000b76 <UART_SetConfig+0xb2>
 8000bd2:	46c0      	nop			; (mov r8, r8)
 8000bd4:	40013800 	.word	0x40013800
 8000bd8:	ffff69f3 	.word	0xffff69f3
 8000bdc:	ffffcfff 	.word	0xffffcfff
 8000be0:	fffff4ff 	.word	0xfffff4ff
 8000be4:	40021000 	.word	0x40021000
 8000be8:	0800125c 	.word	0x0800125c
 8000bec:	40004400 	.word	0x40004400
 8000bf0:	00f42400 	.word	0x00f42400
 8000bf4:	007a1200 	.word	0x007a1200

08000bf8 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8000bf8:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8000bfa:	b530      	push	{r4, r5, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8000bfc:	07da      	lsls	r2, r3, #31
 8000bfe:	d506      	bpl.n	8000c0e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8000c00:	6801      	ldr	r1, [r0, #0]
 8000c02:	4c28      	ldr	r4, [pc, #160]	; (8000ca4 <UART_AdvFeatureConfig+0xac>)
 8000c04:	684a      	ldr	r2, [r1, #4]
 8000c06:	4022      	ands	r2, r4
 8000c08:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8000c0a:	4322      	orrs	r2, r4
 8000c0c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8000c0e:	079a      	lsls	r2, r3, #30
 8000c10:	d506      	bpl.n	8000c20 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8000c12:	6801      	ldr	r1, [r0, #0]
 8000c14:	4c24      	ldr	r4, [pc, #144]	; (8000ca8 <UART_AdvFeatureConfig+0xb0>)
 8000c16:	684a      	ldr	r2, [r1, #4]
 8000c18:	4022      	ands	r2, r4
 8000c1a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8000c1c:	4322      	orrs	r2, r4
 8000c1e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8000c20:	075a      	lsls	r2, r3, #29
 8000c22:	d506      	bpl.n	8000c32 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8000c24:	6801      	ldr	r1, [r0, #0]
 8000c26:	4c21      	ldr	r4, [pc, #132]	; (8000cac <UART_AdvFeatureConfig+0xb4>)
 8000c28:	684a      	ldr	r2, [r1, #4]
 8000c2a:	4022      	ands	r2, r4
 8000c2c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8000c2e:	4322      	orrs	r2, r4
 8000c30:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8000c32:	071a      	lsls	r2, r3, #28
 8000c34:	d506      	bpl.n	8000c44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8000c36:	6801      	ldr	r1, [r0, #0]
 8000c38:	4c1d      	ldr	r4, [pc, #116]	; (8000cb0 <UART_AdvFeatureConfig+0xb8>)
 8000c3a:	684a      	ldr	r2, [r1, #4]
 8000c3c:	4022      	ands	r2, r4
 8000c3e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8000c40:	4322      	orrs	r2, r4
 8000c42:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8000c44:	06da      	lsls	r2, r3, #27
 8000c46:	d506      	bpl.n	8000c56 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8000c48:	6801      	ldr	r1, [r0, #0]
 8000c4a:	4c1a      	ldr	r4, [pc, #104]	; (8000cb4 <UART_AdvFeatureConfig+0xbc>)
 8000c4c:	688a      	ldr	r2, [r1, #8]
 8000c4e:	4022      	ands	r2, r4
 8000c50:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8000c52:	4322      	orrs	r2, r4
 8000c54:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8000c56:	069a      	lsls	r2, r3, #26
 8000c58:	d506      	bpl.n	8000c68 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8000c5a:	6801      	ldr	r1, [r0, #0]
 8000c5c:	4c16      	ldr	r4, [pc, #88]	; (8000cb8 <UART_AdvFeatureConfig+0xc0>)
 8000c5e:	688a      	ldr	r2, [r1, #8]
 8000c60:	4022      	ands	r2, r4
 8000c62:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8000c64:	4322      	orrs	r2, r4
 8000c66:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8000c68:	065a      	lsls	r2, r3, #25
 8000c6a:	d510      	bpl.n	8000c8e <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8000c6c:	6801      	ldr	r1, [r0, #0]
 8000c6e:	4d13      	ldr	r5, [pc, #76]	; (8000cbc <UART_AdvFeatureConfig+0xc4>)
 8000c70:	684a      	ldr	r2, [r1, #4]
 8000c72:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8000c74:	402a      	ands	r2, r5
 8000c76:	4322      	orrs	r2, r4
 8000c78:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8000c7a:	2280      	movs	r2, #128	; 0x80
 8000c7c:	0352      	lsls	r2, r2, #13
 8000c7e:	4294      	cmp	r4, r2
 8000c80:	d105      	bne.n	8000c8e <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8000c82:	684a      	ldr	r2, [r1, #4]
 8000c84:	4c0e      	ldr	r4, [pc, #56]	; (8000cc0 <UART_AdvFeatureConfig+0xc8>)
 8000c86:	4022      	ands	r2, r4
 8000c88:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8000c8a:	4322      	orrs	r2, r4
 8000c8c:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8000c8e:	061b      	lsls	r3, r3, #24
 8000c90:	d506      	bpl.n	8000ca0 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8000c92:	6802      	ldr	r2, [r0, #0]
 8000c94:	490b      	ldr	r1, [pc, #44]	; (8000cc4 <UART_AdvFeatureConfig+0xcc>)
 8000c96:	6853      	ldr	r3, [r2, #4]
 8000c98:	400b      	ands	r3, r1
 8000c9a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8000c9c:	430b      	orrs	r3, r1
 8000c9e:	6053      	str	r3, [r2, #4]
  }
}
 8000ca0:	bd30      	pop	{r4, r5, pc}
 8000ca2:	46c0      	nop			; (mov r8, r8)
 8000ca4:	fffdffff 	.word	0xfffdffff
 8000ca8:	fffeffff 	.word	0xfffeffff
 8000cac:	fffbffff 	.word	0xfffbffff
 8000cb0:	ffff7fff 	.word	0xffff7fff
 8000cb4:	ffffefff 	.word	0xffffefff
 8000cb8:	ffffdfff 	.word	0xffffdfff
 8000cbc:	ffefffff 	.word	0xffefffff
 8000cc0:	ff9fffff 	.word	0xff9fffff
 8000cc4:	fff7ffff 	.word	0xfff7ffff

08000cc8 <HAL_UART_Init>:
{
 8000cc8:	b570      	push	{r4, r5, r6, lr}
 8000cca:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8000ccc:	d101      	bne.n	8000cd2 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8000cce:	2001      	movs	r0, #1
}
 8000cd0:	bd70      	pop	{r4, r5, r6, pc}
  if(huart->gState == HAL_UART_STATE_RESET)
 8000cd2:	0005      	movs	r5, r0
 8000cd4:	3569      	adds	r5, #105	; 0x69
 8000cd6:	782b      	ldrb	r3, [r5, #0]
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d104      	bne.n	8000ce8 <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 8000cde:	0002      	movs	r2, r0
 8000ce0:	3268      	adds	r2, #104	; 0x68
 8000ce2:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8000ce4:	f000 f9d4 	bl	8001090 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8000ce8:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8000cea:	2101      	movs	r1, #1
 8000cec:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8000cee:	702b      	strb	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8000cf0:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8000cf2:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8000cf4:	438b      	bics	r3, r1
 8000cf6:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8000cf8:	f7ff fee4 	bl	8000ac4 <UART_SetConfig>
 8000cfc:	2801      	cmp	r0, #1
 8000cfe:	d0e6      	beq.n	8000cce <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8000d00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d002      	beq.n	8000d0c <HAL_UART_Init+0x44>
    UART_AdvFeatureConfig(huart);
 8000d06:	0020      	movs	r0, r4
 8000d08:	f7ff ff76 	bl	8000bf8 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8000d0c:	6823      	ldr	r3, [r4, #0]
 8000d0e:	490b      	ldr	r1, [pc, #44]	; (8000d3c <HAL_UART_Init+0x74>)
 8000d10:	685a      	ldr	r2, [r3, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000d12:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8000d14:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8000d16:	2108      	movs	r1, #8
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8000d18:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8000d1a:	689a      	ldr	r2, [r3, #8]
 8000d1c:	438a      	bics	r2, r1
 8000d1e:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8000d20:	2201      	movs	r2, #1
 8000d22:	6819      	ldr	r1, [r3, #0]
 8000d24:	430a      	orrs	r2, r1
 8000d26:	601a      	str	r2, [r3, #0]
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
  huart->RxState = HAL_UART_STATE_READY;
 8000d28:	0022      	movs	r2, r4
  huart->gState  = HAL_UART_STATE_READY;
 8000d2a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000d2c:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxState = HAL_UART_STATE_READY;
 8000d2e:	326a      	adds	r2, #106	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8000d30:	3468      	adds	r4, #104	; 0x68
  huart->gState  = HAL_UART_STATE_READY;
 8000d32:	702b      	strb	r3, [r5, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8000d34:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(huart);
 8000d36:	7020      	strb	r0, [r4, #0]
  return (UART_CheckIdleState(huart));
 8000d38:	e7ca      	b.n	8000cd0 <HAL_UART_Init+0x8>
 8000d3a:	46c0      	nop			; (mov r8, r8)
 8000d3c:	fffff7ff 	.word	0xfffff7ff

08000d40 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8000d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d42:	0004      	movs	r4, r0
 8000d44:	000e      	movs	r6, r1
 8000d46:	0015      	movs	r5, r2
 8000d48:	001f      	movs	r7, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000d4a:	6822      	ldr	r2, [r4, #0]
 8000d4c:	69d3      	ldr	r3, [r2, #28]
 8000d4e:	4033      	ands	r3, r6
 8000d50:	1b9b      	subs	r3, r3, r6
 8000d52:	4259      	negs	r1, r3
 8000d54:	414b      	adcs	r3, r1
 8000d56:	42ab      	cmp	r3, r5
 8000d58:	d001      	beq.n	8000d5e <UART_WaitOnFlagUntilTimeout+0x1e>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8000d5a:	2000      	movs	r0, #0
 8000d5c:	e018      	b.n	8000d90 <UART_WaitOnFlagUntilTimeout+0x50>
    if(Timeout != HAL_MAX_DELAY)
 8000d5e:	9b06      	ldr	r3, [sp, #24]
 8000d60:	3301      	adds	r3, #1
 8000d62:	d0f3      	beq.n	8000d4c <UART_WaitOnFlagUntilTimeout+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000d64:	9b06      	ldr	r3, [sp, #24]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d113      	bne.n	8000d92 <UART_WaitOnFlagUntilTimeout+0x52>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000d6a:	6823      	ldr	r3, [r4, #0]
 8000d6c:	490c      	ldr	r1, [pc, #48]	; (8000da0 <UART_WaitOnFlagUntilTimeout+0x60>)
 8000d6e:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(huart);
 8000d70:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000d72:	400a      	ands	r2, r1
 8000d74:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000d76:	689a      	ldr	r2, [r3, #8]
 8000d78:	31a3      	adds	r1, #163	; 0xa3
 8000d7a:	31ff      	adds	r1, #255	; 0xff
 8000d7c:	438a      	bics	r2, r1
 8000d7e:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8000d80:	0022      	movs	r2, r4
 8000d82:	2320      	movs	r3, #32
 8000d84:	3269      	adds	r2, #105	; 0x69
 8000d86:	7013      	strb	r3, [r2, #0]
        huart->RxState = HAL_UART_STATE_READY;
 8000d88:	7053      	strb	r3, [r2, #1]
        __HAL_UNLOCK(huart);
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	3468      	adds	r4, #104	; 0x68
 8000d8e:	7023      	strb	r3, [r4, #0]
}
 8000d90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000d92:	f7ff fa8b 	bl	80002ac <HAL_GetTick>
 8000d96:	9b06      	ldr	r3, [sp, #24]
 8000d98:	1bc0      	subs	r0, r0, r7
 8000d9a:	4283      	cmp	r3, r0
 8000d9c:	d2d5      	bcs.n	8000d4a <UART_WaitOnFlagUntilTimeout+0xa>
 8000d9e:	e7e4      	b.n	8000d6a <UART_WaitOnFlagUntilTimeout+0x2a>
 8000da0:	fffffe5f 	.word	0xfffffe5f

08000da4 <HAL_UART_Transmit>:
{
 8000da4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(huart->gState == HAL_UART_STATE_READY)
 8000da6:	0007      	movs	r7, r0
{
 8000da8:	b085      	sub	sp, #20
 8000daa:	9303      	str	r3, [sp, #12]
  if(huart->gState == HAL_UART_STATE_READY)
 8000dac:	3769      	adds	r7, #105	; 0x69
 8000dae:	783b      	ldrb	r3, [r7, #0]
{
 8000db0:	0004      	movs	r4, r0
 8000db2:	000d      	movs	r5, r1
 8000db4:	0016      	movs	r6, r2
    return HAL_BUSY;
 8000db6:	2002      	movs	r0, #2
  if(huart->gState == HAL_UART_STATE_READY)
 8000db8:	2b20      	cmp	r3, #32
 8000dba:	d146      	bne.n	8000e4a <HAL_UART_Transmit+0xa6>
      return  HAL_ERROR;
 8000dbc:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 8000dbe:	2900      	cmp	r1, #0
 8000dc0:	d043      	beq.n	8000e4a <HAL_UART_Transmit+0xa6>
 8000dc2:	2a00      	cmp	r2, #0
 8000dc4:	d041      	beq.n	8000e4a <HAL_UART_Transmit+0xa6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000dc6:	2380      	movs	r3, #128	; 0x80
 8000dc8:	68a2      	ldr	r2, [r4, #8]
 8000dca:	015b      	lsls	r3, r3, #5
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d104      	bne.n	8000dda <HAL_UART_Transmit+0x36>
 8000dd0:	6923      	ldr	r3, [r4, #16]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d101      	bne.n	8000dda <HAL_UART_Transmit+0x36>
      if((((uint32_t)pData)&1U) != 0U)
 8000dd6:	4201      	tst	r1, r0
 8000dd8:	d137      	bne.n	8000e4a <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 8000dda:	0023      	movs	r3, r4
 8000ddc:	3368      	adds	r3, #104	; 0x68
 8000dde:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 8000de0:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8000de2:	2a01      	cmp	r2, #1
 8000de4:	d031      	beq.n	8000e4a <HAL_UART_Transmit+0xa6>
 8000de6:	2201      	movs	r2, #1
 8000de8:	701a      	strb	r2, [r3, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000dea:	2300      	movs	r3, #0
 8000dec:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000dee:	3321      	adds	r3, #33	; 0x21
 8000df0:	703b      	strb	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8000df2:	f7ff fa5b 	bl	80002ac <HAL_GetTick>
    huart->TxXferSize = Size;
 8000df6:	0023      	movs	r3, r4
 8000df8:	3350      	adds	r3, #80	; 0x50
 8000dfa:	801e      	strh	r6, [r3, #0]
    huart->TxXferCount = Size;
 8000dfc:	805e      	strh	r6, [r3, #2]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000dfe:	2680      	movs	r6, #128	; 0x80
    tickstart = HAL_GetTick();
 8000e00:	9002      	str	r0, [sp, #8]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000e02:	0176      	lsls	r6, r6, #5
    while(huart->TxXferCount > 0)
 8000e04:	0021      	movs	r1, r4
 8000e06:	3152      	adds	r1, #82	; 0x52
 8000e08:	880a      	ldrh	r2, [r1, #0]
 8000e0a:	b292      	uxth	r2, r2
 8000e0c:	2a00      	cmp	r2, #0
 8000e0e:	d10d      	bne.n	8000e2c <HAL_UART_Transmit+0x88>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000e10:	9b03      	ldr	r3, [sp, #12]
 8000e12:	2140      	movs	r1, #64	; 0x40
 8000e14:	9300      	str	r3, [sp, #0]
 8000e16:	0020      	movs	r0, r4
 8000e18:	9b02      	ldr	r3, [sp, #8]
 8000e1a:	f7ff ff91 	bl	8000d40 <UART_WaitOnFlagUntilTimeout>
 8000e1e:	2800      	cmp	r0, #0
 8000e20:	d112      	bne.n	8000e48 <HAL_UART_Transmit+0xa4>
    huart->gState = HAL_UART_STATE_READY;
 8000e22:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8000e24:	3468      	adds	r4, #104	; 0x68
    huart->gState = HAL_UART_STATE_READY;
 8000e26:	703b      	strb	r3, [r7, #0]
    __HAL_UNLOCK(huart);
 8000e28:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8000e2a:	e00e      	b.n	8000e4a <HAL_UART_Transmit+0xa6>
      huart->TxXferCount--;
 8000e2c:	880b      	ldrh	r3, [r1, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000e2e:	2200      	movs	r2, #0
      huart->TxXferCount--;
 8000e30:	3b01      	subs	r3, #1
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	800b      	strh	r3, [r1, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000e36:	9b03      	ldr	r3, [sp, #12]
 8000e38:	2180      	movs	r1, #128	; 0x80
 8000e3a:	9300      	str	r3, [sp, #0]
 8000e3c:	0020      	movs	r0, r4
 8000e3e:	9b02      	ldr	r3, [sp, #8]
 8000e40:	f7ff ff7e 	bl	8000d40 <UART_WaitOnFlagUntilTimeout>
 8000e44:	2800      	cmp	r0, #0
 8000e46:	d002      	beq.n	8000e4e <HAL_UART_Transmit+0xaa>
        return HAL_TIMEOUT;
 8000e48:	2003      	movs	r0, #3
}
 8000e4a:	b005      	add	sp, #20
 8000e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000e4e:	68a3      	ldr	r3, [r4, #8]
 8000e50:	6822      	ldr	r2, [r4, #0]
 8000e52:	42b3      	cmp	r3, r6
 8000e54:	d108      	bne.n	8000e68 <HAL_UART_Transmit+0xc4>
 8000e56:	6923      	ldr	r3, [r4, #16]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d105      	bne.n	8000e68 <HAL_UART_Transmit+0xc4>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8000e5c:	882b      	ldrh	r3, [r5, #0]
        pData += 2;
 8000e5e:	3502      	adds	r5, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8000e60:	05db      	lsls	r3, r3, #23
 8000e62:	0ddb      	lsrs	r3, r3, #23
 8000e64:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2;
 8000e66:	e7cd      	b.n	8000e04 <HAL_UART_Transmit+0x60>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8000e68:	782b      	ldrb	r3, [r5, #0]
 8000e6a:	3501      	adds	r5, #1
 8000e6c:	8513      	strh	r3, [r2, #40]	; 0x28
 8000e6e:	e7c9      	b.n	8000e04 <HAL_UART_Transmit+0x60>

08000e70 <SystemClock_Config>:

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000e70:	2310      	movs	r3, #16
{
 8000e72:	b530      	push	{r4, r5, lr}
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000e74:	22a0      	movs	r2, #160	; 0xa0
{
 8000e76:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e78:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e7a:	2501      	movs	r5, #1
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000e7c:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e7e:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000e80:	0392      	lsls	r2, r2, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e82:	a804      	add	r0, sp, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e84:	9404      	str	r4, [sp, #16]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e86:	9507      	str	r5, [sp, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e88:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e8a:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000e8c:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000e8e:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e90:	f7ff fb58 	bl	8000544 <HAL_RCC_OscConfig>
 8000e94:	2800      	cmp	r0, #0
 8000e96:	d000      	beq.n	8000e9a <SystemClock_Config+0x2a>
 8000e98:	e7fe      	b.n	8000e98 <SystemClock_Config+0x28>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e9a:	2307      	movs	r3, #7
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e9c:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e9e:	9003      	str	r0, [sp, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ea0:	0029      	movs	r1, r5
 8000ea2:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ea4:	9401      	str	r4, [sp, #4]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ea6:	9300      	str	r3, [sp, #0]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ea8:	f7ff fd60 	bl	800096c <HAL_RCC_ClockConfig>
 8000eac:	1e04      	subs	r4, r0, #0
 8000eae:	d000      	beq.n	8000eb2 <SystemClock_Config+0x42>
 8000eb0:	e7fe      	b.n	8000eb0 <SystemClock_Config+0x40>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000eb2:	f7ff fdf1 	bl	8000a98 <HAL_RCC_GetHCLKFreq>
 8000eb6:	21fa      	movs	r1, #250	; 0xfa
 8000eb8:	0089      	lsls	r1, r1, #2
 8000eba:	f7ff f941 	bl	8000140 <__udivsi3>
 8000ebe:	f7ff fa45 	bl	800034c <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000ec2:	2004      	movs	r0, #4
 8000ec4:	f7ff fa5c 	bl	8000380 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000ec8:	2001      	movs	r0, #1
 8000eca:	0022      	movs	r2, r4
 8000ecc:	0021      	movs	r1, r4
 8000ece:	4240      	negs	r0, r0
 8000ed0:	f7ff fa02 	bl	80002d8 <HAL_NVIC_SetPriority>
}
 8000ed4:	b011      	add	sp, #68	; 0x44
 8000ed6:	bd30      	pop	{r4, r5, pc}

08000ed8 <LDBlink>:
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);

}

void LDBlink()
{
 8000ed8:	b510      	push	{r4, lr}
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000eda:	2490      	movs	r4, #144	; 0x90
 8000edc:	05e4      	lsls	r4, r4, #23
 8000ede:	2120      	movs	r1, #32
 8000ee0:	0020      	movs	r0, r4
 8000ee2:	f7ff fb1d 	bl	8000520 <HAL_GPIO_TogglePin>
	HAL_Delay(200);
 8000ee6:	20c8      	movs	r0, #200	; 0xc8
 8000ee8:	f7ff f9e6 	bl	80002b8 <HAL_Delay>
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000eec:	2120      	movs	r1, #32
 8000eee:	0020      	movs	r0, r4
 8000ef0:	f7ff fb16 	bl	8000520 <HAL_GPIO_TogglePin>
}
 8000ef4:	bd10      	pop	{r4, pc}
	...

08000ef8 <ConsoleWrite>:

void ConsoleWrite(char *text)
{
 8000ef8:	b510      	push	{r4, lr}
 8000efa:	0004      	movs	r4, r0
	HAL_UART_Transmit(&huart2, (uint8_t*)text, strlen(text), 0xFFFF);
 8000efc:	f7ff f904 	bl	8000108 <strlen>
 8000f00:	4b03      	ldr	r3, [pc, #12]	; (8000f10 <ConsoleWrite+0x18>)
 8000f02:	b282      	uxth	r2, r0
 8000f04:	0021      	movs	r1, r4
 8000f06:	4803      	ldr	r0, [pc, #12]	; (8000f14 <ConsoleWrite+0x1c>)
 8000f08:	f7ff ff4c 	bl	8000da4 <HAL_UART_Transmit>
}
 8000f0c:	bd10      	pop	{r4, pc}
 8000f0e:	46c0      	nop			; (mov r8, r8)
 8000f10:	0000ffff 	.word	0x0000ffff
 8000f14:	20000094 	.word	0x20000094

08000f18 <main>:
{
 8000f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f1a:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 8000f1c:	f7ff f9ae 	bl	800027c <HAL_Init>
  SystemClock_Config();
 8000f20:	f7ff ffa6 	bl	8000e70 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f24:	2080      	movs	r0, #128	; 0x80
 8000f26:	4b3e      	ldr	r3, [pc, #248]	; (8001020 <main+0x108>)
 8000f28:	0300      	lsls	r0, r0, #12
 8000f2a:	6959      	ldr	r1, [r3, #20]
  GPIO_InitStruct.Pin = B1_Pin;
 8000f2c:	2780      	movs	r7, #128	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f2e:	4301      	orrs	r1, r0
 8000f30:	6159      	str	r1, [r3, #20]
 8000f32:	695a      	ldr	r2, [r3, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f36:	4002      	ands	r2, r0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f38:	2080      	movs	r0, #128	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f3a:	9200      	str	r2, [sp, #0]
 8000f3c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f3e:	6959      	ldr	r1, [r3, #20]
 8000f40:	03c0      	lsls	r0, r0, #15
 8000f42:	4301      	orrs	r1, r0
 8000f44:	6159      	str	r1, [r3, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f46:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f48:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4a:	0289      	lsls	r1, r1, #10
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f4c:	4002      	ands	r2, r0
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f4e:	2090      	movs	r0, #144	; 0x90
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f50:	9201      	str	r2, [sp, #4]
 8000f52:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f54:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f56:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f58:	430a      	orrs	r2, r1
 8000f5a:	615a      	str	r2, [r3, #20]
 8000f5c:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f5e:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f60:	400b      	ands	r3, r1
 8000f62:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f64:	2120      	movs	r1, #32
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f66:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f68:	f7ff fad4 	bl	8000514 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f6c:	4b2d      	ldr	r3, [pc, #180]	; (8001024 <main+0x10c>)
  GPIO_InitStruct.Pin = B1_Pin;
 8000f6e:	01bf      	lsls	r7, r7, #6
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f70:	a903      	add	r1, sp, #12
 8000f72:	482d      	ldr	r0, [pc, #180]	; (8001028 <main+0x110>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f74:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pin = B1_Pin;
 8000f76:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f7a:	f7ff fa15 	bl	80003a8 <HAL_GPIO_Init>
  HAL_GPIO_Init(Sensor_input_GPIO_Port, &GPIO_InitStruct);
 8000f7e:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = Sensor_input_Pin;
 8000f80:	2501      	movs	r5, #1
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f82:	2303      	movs	r3, #3
  HAL_GPIO_Init(Sensor_input_GPIO_Port, &GPIO_InitStruct);
 8000f84:	a903      	add	r1, sp, #12
 8000f86:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = Sensor_input_Pin;
 8000f88:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f8a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(Sensor_input_GPIO_Port, &GPIO_InitStruct);
 8000f8e:	f7ff fa0b 	bl	80003a8 <HAL_GPIO_Init>
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f92:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f94:	2320      	movs	r3, #32
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f96:	a903      	add	r1, sp, #12
 8000f98:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f9a:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9c:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa0:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000fa2:	f7ff fa01 	bl	80003a8 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000fa6:	0022      	movs	r2, r4
 8000fa8:	0021      	movs	r1, r4
 8000faa:	2007      	movs	r0, #7
 8000fac:	f7ff f994 	bl	80002d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000fb0:	2007      	movs	r0, #7
 8000fb2:	f7ff f9c1 	bl	8000338 <HAL_NVIC_EnableIRQ>
  huart1.Instance = USART1;
 8000fb6:	481d      	ldr	r0, [pc, #116]	; (800102c <main+0x114>)
 8000fb8:	4b1d      	ldr	r3, [pc, #116]	; (8001030 <main+0x118>)
  huart1.Init.BaudRate = 9600;
 8000fba:	2696      	movs	r6, #150	; 0x96
  huart1.Instance = USART1;
 8000fbc:	6003      	str	r3, [r0, #0]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8000fbe:	2330      	movs	r3, #48	; 0x30
 8000fc0:	6243      	str	r3, [r0, #36]	; 0x24
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8000fc2:	2380      	movs	r3, #128	; 0x80
  huart1.Init.BaudRate = 9600;
 8000fc4:	01b6      	lsls	r6, r6, #6
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fc6:	350b      	adds	r5, #11
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8000fc8:	015b      	lsls	r3, r3, #5
  huart1.Init.BaudRate = 9600;
 8000fca:	6046      	str	r6, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fcc:	6084      	str	r4, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fce:	60c4      	str	r4, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fd0:	6104      	str	r4, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fd2:	6145      	str	r5, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fd4:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd6:	61c4      	str	r4, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fd8:	6204      	str	r4, [r0, #32]
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8000fda:	6383      	str	r3, [r0, #56]	; 0x38
  huart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8000fdc:	63c7      	str	r7, [r0, #60]	; 0x3c
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fde:	f7ff fe73 	bl	8000cc8 <HAL_UART_Init>
 8000fe2:	42a0      	cmp	r0, r4
 8000fe4:	d000      	beq.n	8000fe8 <main+0xd0>
 8000fe6:	e7fe      	b.n	8000fe6 <main+0xce>
  huart2.Instance = USART2;
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <main+0x11c>)
 8000fea:	4a13      	ldr	r2, [pc, #76]	; (8001038 <main+0x120>)
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fec:	60d8      	str	r0, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fee:	6118      	str	r0, [r3, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ff0:	6198      	str	r0, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ff2:	61d8      	str	r0, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ff4:	6218      	str	r0, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ff6:	6258      	str	r0, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ff8:	0018      	movs	r0, r3
  huart2.Instance = USART2;
 8000ffa:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000ffc:	605e      	str	r6, [r3, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ffe:	615d      	str	r5, [r3, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001000:	f7ff fe62 	bl	8000cc8 <HAL_UART_Init>
 8001004:	2800      	cmp	r0, #0
 8001006:	d10a      	bne.n	800101e <main+0x106>
	  HAL_Delay(1000);
 8001008:	24fa      	movs	r4, #250	; 0xfa
 800100a:	00a4      	lsls	r4, r4, #2
	  LDBlink();
 800100c:	f7ff ff64 	bl	8000ed8 <LDBlink>
	  HAL_Delay(1000);
 8001010:	0020      	movs	r0, r4
 8001012:	f7ff f951 	bl	80002b8 <HAL_Delay>
	  ConsoleWrite("Testovaci vypis\r\n");
 8001016:	4809      	ldr	r0, [pc, #36]	; (800103c <main+0x124>)
 8001018:	f7ff ff6e 	bl	8000ef8 <ConsoleWrite>
 800101c:	e7f6      	b.n	800100c <main+0xf4>
 800101e:	e7fe      	b.n	800101e <main+0x106>
 8001020:	40021000 	.word	0x40021000
 8001024:	10110000 	.word	0x10110000
 8001028:	48000800 	.word	0x48000800
 800102c:	20000024 	.word	0x20000024
 8001030:	40013800 	.word	0x40013800
 8001034:	20000094 	.word	0x20000094
 8001038:	40004400 	.word	0x40004400
 800103c:	08001260 	.word	0x08001260

08001040 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001040:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001042:	2001      	movs	r0, #1
 8001044:	4b11      	ldr	r3, [pc, #68]	; (800108c <HAL_MspInit+0x4c>)
 8001046:	6999      	ldr	r1, [r3, #24]
 8001048:	4301      	orrs	r1, r0
 800104a:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 800104c:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800104e:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001050:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001052:	4002      	ands	r2, r0
 8001054:	9200      	str	r2, [sp, #0]
 8001056:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001058:	69da      	ldr	r2, [r3, #28]

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 800105a:	3806      	subs	r0, #6
  __HAL_RCC_PWR_CLK_ENABLE();
 800105c:	430a      	orrs	r2, r1
 800105e:	61da      	str	r2, [r3, #28]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8001060:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8001062:	69db      	ldr	r3, [r3, #28]
 8001064:	400b      	ands	r3, r1
 8001066:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8001068:	0011      	movs	r1, r2
  __HAL_RCC_PWR_CLK_ENABLE();
 800106a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 800106c:	f7ff f934 	bl	80002d8 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001070:	2200      	movs	r2, #0
 8001072:	2002      	movs	r0, #2
 8001074:	0011      	movs	r1, r2
 8001076:	4240      	negs	r0, r0
 8001078:	f7ff f92e 	bl	80002d8 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800107c:	2200      	movs	r2, #0
 800107e:	2001      	movs	r0, #1
 8001080:	0011      	movs	r1, r2
 8001082:	4240      	negs	r0, r0
 8001084:	f7ff f928 	bl	80002d8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001088:	bd07      	pop	{r0, r1, r2, pc}
 800108a:	46c0      	nop			; (mov r8, r8)
 800108c:	40021000 	.word	0x40021000

08001090 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001090:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8001092:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <HAL_UART_MspInit+0x40>)
 8001094:	6802      	ldr	r2, [r0, #0]
 8001096:	429a      	cmp	r2, r3
 8001098:	d117      	bne.n	80010ca <HAL_UART_MspInit+0x3a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800109a:	2080      	movs	r0, #128	; 0x80
 800109c:	4a0d      	ldr	r2, [pc, #52]	; (80010d4 <HAL_UART_MspInit+0x44>)
 800109e:	0280      	lsls	r0, r0, #10
 80010a0:	69d1      	ldr	r1, [r2, #28]
 80010a2:	4301      	orrs	r1, r0
 80010a4:	61d1      	str	r1, [r2, #28]
 80010a6:	69d3      	ldr	r3, [r2, #28]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a8:	a901      	add	r1, sp, #4
    __HAL_RCC_USART2_CLK_ENABLE();
 80010aa:	4003      	ands	r3, r0
 80010ac:	9300      	str	r3, [sp, #0]
 80010ae:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80010b0:	230c      	movs	r3, #12
 80010b2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b4:	3b0a      	subs	r3, #10
 80010b6:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b8:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010bc:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80010c2:	3301      	adds	r3, #1
 80010c4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c6:	f7ff f96f 	bl	80003a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010ca:	b007      	add	sp, #28
 80010cc:	bd00      	pop	{pc}
 80010ce:	46c0      	nop			; (mov r8, r8)
 80010d0:	40004400 	.word	0x40004400
 80010d4:	40021000 	.word	0x40021000

080010d8 <NMI_Handler>:
 80010d8:	4770      	bx	lr

080010da <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80010da:	e7fe      	b.n	80010da <HardFault_Handler>

080010dc <SVC_Handler>:
 80010dc:	4770      	bx	lr

080010de <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010de:	4770      	bx	lr

080010e0 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80010e0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010e2:	f7ff f8db 	bl	800029c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80010e6:	f7ff f95a 	bl	800039e <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ea:	bd10      	pop	{r4, pc}

080010ec <EXTI4_15_IRQHandler>:
* @brief This function handles EXTI line 4 to 15 interrupts.
*/
void EXTI4_15_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */
  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)){
 80010ec:	2180      	movs	r1, #128	; 0x80
{
 80010ee:	b510      	push	{r4, lr}
  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)){
 80010f0:	0189      	lsls	r1, r1, #6
 80010f2:	4807      	ldr	r0, [pc, #28]	; (8001110 <EXTI4_15_IRQHandler+0x24>)
 80010f4:	f7ff fa08 	bl	8000508 <HAL_GPIO_ReadPin>
 80010f8:	2800      	cmp	r0, #0
 80010fa:	d004      	beq.n	8001106 <EXTI4_15_IRQHandler+0x1a>
	// Sem pis kod pro modre tlacitko. Cerne je RESET
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80010fc:	2090      	movs	r0, #144	; 0x90
 80010fe:	2120      	movs	r1, #32
 8001100:	05c0      	lsls	r0, r0, #23
 8001102:	f7ff fa0d 	bl	8000520 <HAL_GPIO_TogglePin>
  }

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001106:	2080      	movs	r0, #128	; 0x80
 8001108:	0180      	lsls	r0, r0, #6
 800110a:	f7ff fa0f 	bl	800052c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800110e:	bd10      	pop	{r4, pc}
 8001110:	48000800 	.word	0x48000800

08001114 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8001114:	2101      	movs	r1, #1
 8001116:	4b11      	ldr	r3, [pc, #68]	; (800115c <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8001118:	4811      	ldr	r0, [pc, #68]	; (8001160 <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001U;
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	430a      	orrs	r2, r1
 800111e:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8001120:	685a      	ldr	r2, [r3, #4]
 8001122:	4002      	ands	r2, r0
 8001124:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	480e      	ldr	r0, [pc, #56]	; (8001164 <SystemInit+0x50>)
 800112a:	4002      	ands	r2, r0
 800112c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	480d      	ldr	r0, [pc, #52]	; (8001168 <SystemInit+0x54>)
 8001132:	4002      	ands	r2, r0
 8001134:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8001136:	685a      	ldr	r2, [r3, #4]
 8001138:	480c      	ldr	r0, [pc, #48]	; (800116c <SystemInit+0x58>)
 800113a:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 800113c:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 800113e:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8001140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001142:	4382      	bics	r2, r0
 8001144:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 8001146:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001148:	4809      	ldr	r0, [pc, #36]	; (8001170 <SystemInit+0x5c>)
 800114a:	4002      	ands	r2, r0
 800114c:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 800114e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001150:	438a      	bics	r2, r1
 8001152:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]

}
 8001158:	4770      	bx	lr
 800115a:	46c0      	nop			; (mov r8, r8)
 800115c:	40021000 	.word	0x40021000
 8001160:	08ffb80c 	.word	0x08ffb80c
 8001164:	fef6ffff 	.word	0xfef6ffff
 8001168:	fffbffff 	.word	0xfffbffff
 800116c:	ffc0ffff 	.word	0xffc0ffff
 8001170:	fffffeec 	.word	0xfffffeec

08001174 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001174:	480d      	ldr	r0, [pc, #52]	; (80011ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001176:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001178:	480d      	ldr	r0, [pc, #52]	; (80011b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800117a:	490e      	ldr	r1, [pc, #56]	; (80011b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800117c:	4a0e      	ldr	r2, [pc, #56]	; (80011b8 <LoopForever+0xe>)
  movs r3, #0
 800117e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001180:	e002      	b.n	8001188 <LoopCopyDataInit>

08001182 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001182:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001184:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001186:	3304      	adds	r3, #4

08001188 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001188:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800118a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800118c:	d3f9      	bcc.n	8001182 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800118e:	4a0b      	ldr	r2, [pc, #44]	; (80011bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001190:	4c0b      	ldr	r4, [pc, #44]	; (80011c0 <LoopForever+0x16>)
  movs r3, #0
 8001192:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001194:	e001      	b.n	800119a <LoopFillZerobss>

08001196 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001196:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001198:	3204      	adds	r2, #4

0800119a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800119a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800119c:	d3fb      	bcc.n	8001196 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800119e:	f7ff ffb9 	bl	8001114 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80011a2:	f000 f811 	bl	80011c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011a6:	f7ff feb7 	bl	8000f18 <main>

080011aa <LoopForever>:

LoopForever:
    b LoopForever
 80011aa:	e7fe      	b.n	80011aa <LoopForever>
  ldr   r0, =_estack
 80011ac:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80011b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011b4:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80011b8:	08001294 	.word	0x08001294
  ldr r2, =_sbss
 80011bc:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80011c0:	20000104 	.word	0x20000104

080011c4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011c4:	e7fe      	b.n	80011c4 <ADC1_IRQHandler>
	...

080011c8 <__libc_init_array>:
 80011c8:	b570      	push	{r4, r5, r6, lr}
 80011ca:	2600      	movs	r6, #0
 80011cc:	4d0c      	ldr	r5, [pc, #48]	; (8001200 <__libc_init_array+0x38>)
 80011ce:	4c0d      	ldr	r4, [pc, #52]	; (8001204 <__libc_init_array+0x3c>)
 80011d0:	1b64      	subs	r4, r4, r5
 80011d2:	10a4      	asrs	r4, r4, #2
 80011d4:	42a6      	cmp	r6, r4
 80011d6:	d109      	bne.n	80011ec <__libc_init_array+0x24>
 80011d8:	2600      	movs	r6, #0
 80011da:	f000 f823 	bl	8001224 <_init>
 80011de:	4d0a      	ldr	r5, [pc, #40]	; (8001208 <__libc_init_array+0x40>)
 80011e0:	4c0a      	ldr	r4, [pc, #40]	; (800120c <__libc_init_array+0x44>)
 80011e2:	1b64      	subs	r4, r4, r5
 80011e4:	10a4      	asrs	r4, r4, #2
 80011e6:	42a6      	cmp	r6, r4
 80011e8:	d105      	bne.n	80011f6 <__libc_init_array+0x2e>
 80011ea:	bd70      	pop	{r4, r5, r6, pc}
 80011ec:	00b3      	lsls	r3, r6, #2
 80011ee:	58eb      	ldr	r3, [r5, r3]
 80011f0:	4798      	blx	r3
 80011f2:	3601      	adds	r6, #1
 80011f4:	e7ee      	b.n	80011d4 <__libc_init_array+0xc>
 80011f6:	00b3      	lsls	r3, r6, #2
 80011f8:	58eb      	ldr	r3, [r5, r3]
 80011fa:	4798      	blx	r3
 80011fc:	3601      	adds	r6, #1
 80011fe:	e7f2      	b.n	80011e6 <__libc_init_array+0x1e>
 8001200:	0800128c 	.word	0x0800128c
 8001204:	0800128c 	.word	0x0800128c
 8001208:	0800128c 	.word	0x0800128c
 800120c:	08001290 	.word	0x08001290

08001210 <memcpy>:
 8001210:	2300      	movs	r3, #0
 8001212:	b510      	push	{r4, lr}
 8001214:	429a      	cmp	r2, r3
 8001216:	d100      	bne.n	800121a <memcpy+0xa>
 8001218:	bd10      	pop	{r4, pc}
 800121a:	5ccc      	ldrb	r4, [r1, r3]
 800121c:	54c4      	strb	r4, [r0, r3]
 800121e:	3301      	adds	r3, #1
 8001220:	e7f8      	b.n	8001214 <memcpy+0x4>
	...

08001224 <_init>:
 8001224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001226:	46c0      	nop			; (mov r8, r8)
 8001228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800122a:	bc08      	pop	{r3}
 800122c:	469e      	mov	lr, r3
 800122e:	4770      	bx	lr

08001230 <_fini>:
 8001230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001232:	46c0      	nop			; (mov r8, r8)
 8001234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001236:	bc08      	pop	{r3}
 8001238:	469e      	mov	lr, r3
 800123a:	4770      	bx	lr
